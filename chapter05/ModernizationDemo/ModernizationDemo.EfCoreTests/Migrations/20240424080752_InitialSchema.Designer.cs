// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModernizationDemo.EfCoreTests.Model;

#nullable disable

namespace ModernizationDemo.EfCoreTests.Migrations
{
    [DbContext(typeof(DotNetCollegeContext))]
    [Migration("20240424080752_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Czech_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryCourseTemplate", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("CourseTemplatesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "CourseTemplatesId")
                        .HasName("PK_dbo.CategoryCourseTemplate");

                    b.HasIndex(new[] { "CourseTemplatesId" }, "IX_CategoryCourseTemplate_CourseTemplatesId")
                        .HasDatabaseName("IX_CourseTemplatesId");

                    b.ToTable("CategoryCourseTemplate", (string)null);
                });

            modelBuilder.Entity("CourseLector", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("LectorsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "LectorsId")
                        .HasName("PK_dbo.CourseLector");

                    b.HasIndex(new[] { "LectorsId" }, "IX_CourseLector_LectorsId")
                        .HasDatabaseName("IX_LectorsId");

                    b.ToTable("CourseLector", (string)null);
                });

            modelBuilder.Entity("LectorPrivateCourseRequest", b =>
                {
                    b.Property<int>("LectorsId")
                        .HasColumnType("int");

                    b.Property<int>("PrivateCourseRequestsId")
                        .HasColumnType("int");

                    b.HasKey("LectorsId", "PrivateCourseRequestsId")
                        .HasName("PK_dbo.LectorPrivateCourseRequest");

                    b.HasIndex(new[] { "PrivateCourseRequestsId" }, "IX_LectorPrivateCourseRequest_PrivateCourseRequestsId")
                        .HasDatabaseName("IX_PrivateCourseRequestsId");

                    b.ToTable("LectorPrivateCourseRequest", (string)null);
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LectorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Accounts");

                    b.HasIndex(new[] { "LectorId" }, "IX_Accounts_LectorId")
                        .HasDatabaseName("IX_LectorId");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Accounts_SupplierId")
                        .HasDatabaseName("IX_SupplierId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.AccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CustomAccountTransactionAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("CustomAccountTransaction_Amount");

                    b.Property<DateTime?>("CustomAccountTransactionCreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CustomAccountTransaction_CreatedDate");

                    b.Property<DateTime?>("CustomAccountTransactionPaidDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CustomAccountTransaction_PaidDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LectorInvoiceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccountTransactions");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountTransactions_AccountId")
                        .HasDatabaseName("IX_AccountId");

                    b.HasIndex(new[] { "CourseId" }, "IX_AccountTransactions_CourseId")
                        .HasDatabaseName("IX_CourseId");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_AccountTransactions_InvoiceId")
                        .HasDatabaseName("IX_InvoiceId");

                    b.ToTable("AccountTransactions");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyRegistration")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Dic")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DIC");

                    b.Property<string>("Iban")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ic")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IC");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Swift")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ZIP");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Addresses");

                    b.HasIndex(new[] { "CountryId" }, "IX_Addresses_CountryId")
                        .HasDatabaseName("IX_CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Attachments");

                    b.HasIndex(new[] { "CourseId" }, "IX_Attachments_CourseId")
                        .HasDatabaseName("IX_CourseId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.AttendeeRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnknown")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AttendeeRegistrations");

                    b.HasIndex(new[] { "OrderId" }, "IX_AttendeeRegistrations_OrderId")
                        .HasDatabaseName("IX_OrderId");

                    b.HasIndex(new[] { "UserId" }, "IX_AttendeeRegistrations_UserId")
                        .HasDatabaseName("IX_UserId");

                    b.ToTable("AttendeeRegistrations");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PromotionOrder")
                        .HasColumnType("int");

                    b.Property<string>("UrlName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Categories");

                    b.HasIndex(new[] { "MainCategoryId" }, "IX_Categories_MainCategoryId")
                        .HasDatabaseName("IX_MainCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Countries");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowCashPayments")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOnlinePayments")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseSubtitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CourseTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEveningCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistrationClosed")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Margin")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("MinimumNumberOfAttendees")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Courses");

                    b.HasIndex(new[] { "CourseTemplateId" }, "IX_Courses_CourseTemplateId")
                        .HasDatabaseName("IX_CourseTemplateId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Courses_CustomerId")
                        .HasDatabaseName("IX_CustomerId");

                    b.HasIndex(new[] { "LocationId" }, "IX_Courses_LocationId")
                        .HasDatabaseName("IX_LocationId");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Courses_SupplierId")
                        .HasDatabaseName("IX_SupplierId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.CourseDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CourseDates");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseDates_CourseId")
                        .HasDatabaseName("IX_CourseId");

                    b.ToTable("CourseDates");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.CourseReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WasReminded")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CourseReminders");

                    b.HasIndex(new[] { "AppUserId" }, "IX_CourseReminders_AppUserId")
                        .HasDatabaseName("IX_AppUserId");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseReminders_CourseId")
                        .HasDatabaseName("IX_CourseId");

                    b.ToTable("CourseReminders");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.CourseTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PromotionOrder")
                        .HasColumnType("int");

                    b.Property<string>("RequiredKnowledge")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TypicalNumberOfDays")
                        .HasColumnType("int");

                    b.Property<string>("UrlName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CourseTemplates");

                    b.ToTable("CourseTemplates");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.CourseTemplateRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedCourseTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CourseTemplateRelations");

                    b.HasIndex(new[] { "CourseTemplateId" }, "IX_CourseTemplateRelations_CourseTemplateId")
                        .HasDatabaseName("IX_CourseTemplateId");

                    b.HasIndex(new[] { "RelatedCourseTemplateId" }, "IX_CourseTemplateRelations_RelatedCourseTemplateId")
                        .HasDatabaseName("IX_RelatedCourseTemplateId");

                    b.ToTable("CourseTemplateRelations");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Customers");

                    b.HasIndex(new[] { "AddressId" }, "IX_Customers_AddressId")
                        .HasDatabaseName("IX_AddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.DiscountCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOneTime")
                        .HasColumnType("bit");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RestrictToCourseId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.DiscountCoupons");

                    b.HasIndex(new[] { "RestrictToCourseId" }, "IX_DiscountCoupons_RestrictToCourseId")
                        .HasDatabaseName("IX_RestrictToCourseId");

                    b.ToTable("DiscountCoupons");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectedInvoiceNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsCorrectionInvoice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinalInvoice")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TaxDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmountWithoutVat")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TotalAmountWithoutVAT");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Invoices");

                    b.HasIndex(new[] { "AddressId" }, "IX_Invoices_AddressId")
                        .HasDatabaseName("IX_AddressId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Invoices_CustomerId")
                        .HasDatabaseName("IX_CustomerId");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Invoices_SupplierId")
                        .HasDatabaseName("IX_SupplierId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Vatrate")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("VATRate");

                    b.HasKey("Id")
                        .HasName("PK_dbo.InvoiceLines");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_InvoiceLines_InvoiceId")
                        .HasDatabaseName("IX_InvoiceId");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Lector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Blog")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CommissionAccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("CommissionPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CommissionPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("DefaultSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Twitter")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UrlName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Lectors");

                    b.HasIndex(new[] { "CommissionAccountId" }, "IX_Lectors_CommissionAccountId")
                        .HasDatabaseName("IX_CommissionAccountId");

                    b.HasIndex(new[] { "DefaultSupplierId" }, "IX_Lectors_DefaultSupplierId")
                        .HasDatabaseName("IX_DefaultSupplierId");

                    b.HasIndex(new[] { "UserId" }, "IX_Lectors_UserId")
                        .HasDatabaseName("IX_UserId");

                    b.ToTable("Lectors");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GeekcoreLocationId")
                        .HasColumnType("int");

                    b.Property<string>("HowToGetThere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Zip")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ZIP");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Locations");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UrlName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MainCategories");

                    b.ToTable("MainCategories");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("BraintreeTransactionId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DiscountCouponId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("FinalInvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("HasVat")
                        .HasColumnType("bit")
                        .HasColumnName("HasVAT");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProformaInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Vatrate")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("VATRate");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Orders");

                    b.HasIndex(new[] { "BillingAddressId" }, "IX_Orders_BillingAddressId")
                        .HasDatabaseName("IX_BillingAddressId");

                    b.HasIndex(new[] { "CourseId" }, "IX_Orders_CourseId")
                        .HasDatabaseName("IX_CourseId");

                    b.HasIndex(new[] { "CourseTemplateId" }, "IX_Orders_CourseTemplateId")
                        .HasDatabaseName("IX_CourseTemplateId");

                    b.HasIndex(new[] { "DiscountCouponId" }, "IX_Orders_DiscountCouponId")
                        .HasDatabaseName("IX_DiscountCouponId");

                    b.HasIndex(new[] { "FinalInvoiceId" }, "IX_Orders_FinalInvoiceId")
                        .HasDatabaseName("IX_FinalInvoiceId");

                    b.HasIndex(new[] { "ProformaInvoiceId" }, "IX_Orders_ProformaInvoiceId")
                        .HasDatabaseName("IX_ProformaInvoiceId");

                    b.HasIndex(new[] { "UserId" }, "IX_Orders_UserId")
                        .HasDatabaseName("IX_UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.OrderAvailableDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.OrderAvailableDates");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderAvailableDates_OrderId")
                        .HasDatabaseName("IX_OrderId");

                    b.ToTable("OrderAvailableDates");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.PrivateCourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CourseLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GrantFinancing")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0),(0)))");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfAttendees")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PrivateCourseRequests");

                    b.HasIndex(new[] { "AppUserId" }, "IX_PrivateCourseRequests_AppUserId")
                        .HasDatabaseName("IX_AppUserId");

                    b.ToTable("PrivateCourseRequests");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Recording", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AzureAssetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicLinkUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Recordings");

                    b.HasIndex(new[] { "CourseId" }, "IX_Recordings_CourseId")
                        .HasDatabaseName("IX_CourseId");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVatpayer")
                        .HasColumnType("bit")
                        .HasColumnName("IsVATPayer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Vatrate")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("VATRate");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Suppliers");

                    b.HasIndex(new[] { "AddressId" }, "IX_Suppliers_AddressId")
                        .HasDatabaseName("IX_AddressId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("CategoryCourseTemplate", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CategoryCourseTemplate_dbo.Categories_CategoriesId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.CourseTemplate", null)
                        .WithMany()
                        .HasForeignKey("CourseTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CategoryCourseTemplate_dbo.CourseTemplates_CourseTemplatesId");
                });

            modelBuilder.Entity("CourseLector", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CourseLector_dbo.Courses_CoursesId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Lector", null)
                        .WithMany()
                        .HasForeignKey("LectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CourseLector_dbo.Lectors_LectorsId");
                });

            modelBuilder.Entity("LectorPrivateCourseRequest", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Lector", null)
                        .WithMany()
                        .HasForeignKey("LectorsId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LectorPrivateCourseRequest_dbo.Lectors_LectorsId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.PrivateCourseRequest", null)
                        .WithMany()
                        .HasForeignKey("PrivateCourseRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LectorPrivateCourseRequest_dbo.PrivateCourseRequests_PrivateCourseRequestsId");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Account", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Lector", "Lector")
                        .WithMany("Accounts")
                        .HasForeignKey("LectorId")
                        .HasConstraintName("FK_dbo.Accounts_dbo.Lectors_LectorId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Supplier", "Supplier")
                        .WithMany("Accounts")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.Accounts_dbo.Suppliers_SupplierId");

                    b.Navigation("Lector");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.AccountTransaction", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Account", "Account")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountTransactions_dbo.Accounts_AccountId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Course", "Course")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.AccountTransactions_dbo.Courses_CourseId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Invoice", "Invoice")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.AccountTransactions_dbo.Invoices_InvoiceId");

                    b.Navigation("Account");

                    b.Navigation("Course");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Address", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_dbo.Addresses_dbo.Countries_CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Attachment", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Course", "Course")
                        .WithMany("Attachments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Attachments_dbo.Courses_CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.AttendeeRegistration", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Order", "Order")
                        .WithMany("AttendeeRegistrations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AttendeeRegistrations_dbo.Orders_OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Category", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.MainCategory", "MainCategory")
                        .WithMany("Categories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Categories_dbo.MainCategories_MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Course", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.CourseTemplate", "CourseTemplate")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Courses_dbo.CourseTemplates_CourseTemplateId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Customer", "Customer")
                        .WithMany("Courses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_dbo.Courses_dbo.Customers_CustomerId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Location", "Location")
                        .WithMany("Courses")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_dbo.Courses_dbo.Locations_LocationId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Supplier", "Supplier")
                        .WithMany("Courses")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Courses_dbo.Suppliers_SupplierId");

                    b.Navigation("CourseTemplate");

                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.CourseDate", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Course", "Course")
                        .WithMany("CourseDates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CourseDates_dbo.Courses_CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.CourseReminder", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Course", "Course")
                        .WithMany("CourseReminders")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CourseReminders_dbo.Courses_CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.CourseTemplateRelation", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.CourseTemplate", "CourseTemplate")
                        .WithMany("CourseTemplateRelationCourseTemplates")
                        .HasForeignKey("CourseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CourseTemplateRelations_dbo.CourseTemplates_CourseTemplateId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.CourseTemplate", "RelatedCourseTemplate")
                        .WithMany("CourseTemplateRelationRelatedCourseTemplates")
                        .HasForeignKey("RelatedCourseTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CourseTemplateRelations_dbo.CourseTemplates_RelatedCourseTemplateId");

                    b.Navigation("CourseTemplate");

                    b.Navigation("RelatedCourseTemplate");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Customer", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Customers_dbo.Addresses_AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.DiscountCoupon", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Course", "RestrictToCourse")
                        .WithMany("DiscountCoupons")
                        .HasForeignKey("RestrictToCourseId")
                        .HasConstraintName("FK_dbo.DiscountCoupons_dbo.Courses_RestrictToCourseId");

                    b.Navigation("RestrictToCourse");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Invoice", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Address", "Address")
                        .WithMany("Invoices")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Invoices_dbo.Addresses_AddressId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_dbo.Invoices_dbo.Customers_CustomerId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Invoices_dbo.Suppliers_SupplierId");

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.InvoiceLine", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InvoiceLines_dbo.Invoices_InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Lector", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Account", "CommissionAccount")
                        .WithMany("Lectors")
                        .HasForeignKey("CommissionAccountId")
                        .HasConstraintName("FK_dbo.Lectors_dbo.Accounts_CommissionAccountId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Supplier", "DefaultSupplier")
                        .WithMany("Lectors")
                        .HasForeignKey("DefaultSupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Lectors_dbo.Suppliers_DefaultSupplierId");

                    b.Navigation("CommissionAccount");

                    b.Navigation("DefaultSupplier");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Order", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Address", "BillingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("BillingAddressId")
                        .HasConstraintName("FK_dbo.Orders_dbo.Addresses_BillingAddressId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Course", "Course")
                        .WithMany("Orders")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Orders_dbo.Courses_CourseId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.CourseTemplate", "CourseTemplate")
                        .WithMany("Orders")
                        .HasForeignKey("CourseTemplateId")
                        .HasConstraintName("FK_dbo.Orders_dbo.CourseTemplates_CourseTemplateId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.DiscountCoupon", "DiscountCoupon")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountCouponId")
                        .HasConstraintName("FK_dbo.Orders_dbo.DiscountCoupons_DiscountCouponId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Invoice", "FinalInvoice")
                        .WithMany("OrderFinalInvoices")
                        .HasForeignKey("FinalInvoiceId")
                        .HasConstraintName("FK_dbo.Orders_dbo.Invoices_FinalInvoiceId");

                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Invoice", "ProformaInvoice")
                        .WithMany("OrderProformaInvoices")
                        .HasForeignKey("ProformaInvoiceId")
                        .HasConstraintName("FK_dbo.Orders_dbo.Invoices_ProformaInvoiceId");

                    b.Navigation("BillingAddress");

                    b.Navigation("Course");

                    b.Navigation("CourseTemplate");

                    b.Navigation("DiscountCoupon");

                    b.Navigation("FinalInvoice");

                    b.Navigation("ProformaInvoice");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.OrderAvailableDate", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Order", "Order")
                        .WithMany("OrderAvailableDates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.OrderAvailableDates_dbo.Orders_OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Recording", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Course", "Course")
                        .WithMany("Recordings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Recordings_dbo.Courses_CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Supplier", b =>
                {
                    b.HasOne("ModernizationDemo.EfCoreTests.Model.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Suppliers_dbo.Addresses_AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Account", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("Lectors");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Course", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("Attachments");

                    b.Navigation("CourseDates");

                    b.Navigation("CourseReminders");

                    b.Navigation("DiscountCoupons");

                    b.Navigation("Orders");

                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.CourseTemplate", b =>
                {
                    b.Navigation("CourseTemplateRelationCourseTemplates");

                    b.Navigation("CourseTemplateRelationRelatedCourseTemplates");

                    b.Navigation("Courses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Customer", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.DiscountCoupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Invoice", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("InvoiceLines");

                    b.Navigation("OrderFinalInvoices");

                    b.Navigation("OrderProformaInvoices");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Lector", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Location", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.MainCategory", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Order", b =>
                {
                    b.Navigation("AttendeeRegistrations");

                    b.Navigation("OrderAvailableDates");
                });

            modelBuilder.Entity("ModernizationDemo.EfCoreTests.Model.Supplier", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Courses");

                    b.Navigation("Invoices");

                    b.Navigation("Lectors");
                });
#pragma warning restore 612, 618
        }
    }
}
