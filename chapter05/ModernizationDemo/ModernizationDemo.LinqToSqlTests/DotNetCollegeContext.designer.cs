#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModernizationDemo.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dotnetcollege")]
	public partial class DotNetCollegeContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccountTransaction(AccountTransaction instance);
    partial void UpdateAccountTransaction(AccountTransaction instance);
    partial void DeleteAccountTransaction(AccountTransaction instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertAttendeeRegistration(AttendeeRegistration instance);
    partial void UpdateAttendeeRegistration(AttendeeRegistration instance);
    partial void DeleteAttendeeRegistration(AttendeeRegistration instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCategoryCourseTemplate(CategoryCourseTemplate instance);
    partial void UpdateCategoryCourseTemplate(CategoryCourseTemplate instance);
    partial void DeleteCategoryCourseTemplate(CategoryCourseTemplate instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCourseDate(CourseDate instance);
    partial void UpdateCourseDate(CourseDate instance);
    partial void DeleteCourseDate(CourseDate instance);
    partial void InsertCourseLector(CourseLector instance);
    partial void UpdateCourseLector(CourseLector instance);
    partial void DeleteCourseLector(CourseLector instance);
    partial void InsertCourseReminder(CourseReminder instance);
    partial void UpdateCourseReminder(CourseReminder instance);
    partial void DeleteCourseReminder(CourseReminder instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCourseTemplateRelation(CourseTemplateRelation instance);
    partial void UpdateCourseTemplateRelation(CourseTemplateRelation instance);
    partial void DeleteCourseTemplateRelation(CourseTemplateRelation instance);
    partial void InsertCourseTemplate(CourseTemplate instance);
    partial void UpdateCourseTemplate(CourseTemplate instance);
    partial void DeleteCourseTemplate(CourseTemplate instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDiscountCoupon(DiscountCoupon instance);
    partial void UpdateDiscountCoupon(DiscountCoupon instance);
    partial void DeleteDiscountCoupon(DiscountCoupon instance);
    partial void InsertInvoiceLine(InvoiceLine instance);
    partial void UpdateInvoiceLine(InvoiceLine instance);
    partial void DeleteInvoiceLine(InvoiceLine instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertLectorPrivateCourseRequest(LectorPrivateCourseRequest instance);
    partial void UpdateLectorPrivateCourseRequest(LectorPrivateCourseRequest instance);
    partial void DeleteLectorPrivateCourseRequest(LectorPrivateCourseRequest instance);
    partial void InsertLector(Lector instance);
    partial void UpdateLector(Lector instance);
    partial void DeleteLector(Lector instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertMainCategory(MainCategory instance);
    partial void UpdateMainCategory(MainCategory instance);
    partial void DeleteMainCategory(MainCategory instance);
    partial void InsertOrderAvailableDate(OrderAvailableDate instance);
    partial void UpdateOrderAvailableDate(OrderAvailableDate instance);
    partial void DeleteOrderAvailableDate(OrderAvailableDate instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertPrivateCourseRequest(PrivateCourseRequest instance);
    partial void UpdatePrivateCourseRequest(PrivateCourseRequest instance);
    partial void DeletePrivateCourseRequest(PrivateCourseRequest instance);
    partial void InsertRecording(Recording instance);
    partial void UpdateRecording(Recording instance);
    partial void DeleteRecording(Recording instance);
    #endregion
		
		public DotNetCollegeContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DotNetCollegeContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DotNetCollegeContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DotNetCollegeContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AccountTransaction> AccountTransactions
		{
			get
			{
				return this.GetTable<AccountTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<AttendeeRegistration> AttendeeRegistrations
		{
			get
			{
				return this.GetTable<AttendeeRegistration>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CategoryCourseTemplate> CategoryCourseTemplates
		{
			get
			{
				return this.GetTable<CategoryCourseTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<CourseDate> CourseDates
		{
			get
			{
				return this.GetTable<CourseDate>();
			}
		}
		
		public System.Data.Linq.Table<CourseLector> CourseLectors
		{
			get
			{
				return this.GetTable<CourseLector>();
			}
		}
		
		public System.Data.Linq.Table<CourseReminder> CourseReminders
		{
			get
			{
				return this.GetTable<CourseReminder>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CourseTemplateRelation> CourseTemplateRelations
		{
			get
			{
				return this.GetTable<CourseTemplateRelation>();
			}
		}
		
		public System.Data.Linq.Table<CourseTemplate> CourseTemplates
		{
			get
			{
				return this.GetTable<CourseTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<DiscountCoupon> DiscountCoupons
		{
			get
			{
				return this.GetTable<DiscountCoupon>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceLine> InvoiceLines
		{
			get
			{
				return this.GetTable<InvoiceLine>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<LectorPrivateCourseRequest> LectorPrivateCourseRequests
		{
			get
			{
				return this.GetTable<LectorPrivateCourseRequest>();
			}
		}
		
		public System.Data.Linq.Table<Lector> Lectors
		{
			get
			{
				return this.GetTable<Lector>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<MainCategory> MainCategories
		{
			get
			{
				return this.GetTable<MainCategory>();
			}
		}
		
		public System.Data.Linq.Table<OrderAvailableDate> OrderAvailableDates
		{
			get
			{
				return this.GetTable<OrderAvailableDate>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<PrivateCourseRequest> PrivateCourseRequests
		{
			get
			{
				return this.GetTable<PrivateCourseRequest>();
			}
		}
		
		public System.Data.Linq.Table<Recording> Recordings
		{
			get
			{
				return this.GetTable<Recording>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suppliers")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _AddressId;
		
		private string _Currency;
		
		private decimal _VATRate;
		
		private bool _IsVATPayer;
		
		private bool _IsAutomated;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Lector> _Lectors;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnVATRateChanging(decimal value);
    partial void OnVATRateChanged();
    partial void OnIsVATPayerChanging(bool value);
    partial void OnIsVATPayerChanged();
    partial void OnIsAutomatedChanging(bool value);
    partial void OnIsAutomatedChanged();
    #endregion
		
		public Supplier()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Lectors = new EntitySet<Lector>(new Action<Lector>(this.attach_Lectors), new Action<Lector>(this.detach_Lectors));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(20)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VATRate", DbType="Decimal(18,2) NOT NULL")]
		public decimal VATRate
		{
			get
			{
				return this._VATRate;
			}
			set
			{
				if ((this._VATRate != value))
				{
					this.OnVATRateChanging(value);
					this.SendPropertyChanging();
					this._VATRate = value;
					this.SendPropertyChanged("VATRate");
					this.OnVATRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVATPayer", DbType="Bit NOT NULL")]
		public bool IsVATPayer
		{
			get
			{
				return this._IsVATPayer;
			}
			set
			{
				if ((this._IsVATPayer != value))
				{
					this.OnIsVATPayerChanging(value);
					this.SendPropertyChanging();
					this._IsVATPayer = value;
					this.SendPropertyChanged("IsVATPayer");
					this.OnIsVATPayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAutomated", DbType="Bit NOT NULL")]
		public bool IsAutomated
		{
			get
			{
				return this._IsAutomated;
			}
			set
			{
				if ((this._IsAutomated != value))
				{
					this.OnIsAutomatedChanging(value);
					this.SendPropertyChanging();
					this._IsAutomated = value;
					this.SendPropertyChanged("IsAutomated");
					this.OnIsAutomatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Account", Storage="_Accounts", ThisKey="Id", OtherKey="SupplierId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Course", Storage="_Courses", ThisKey="Id", OtherKey="SupplierId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Invoice", Storage="_Invoices", ThisKey="Id", OtherKey="SupplierId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Lector", Storage="_Lectors", ThisKey="Id", OtherKey="DefaultSupplierId")]
		public EntitySet<Lector> Lectors
		{
			get
			{
				return this._Lectors;
			}
			set
			{
				this._Lectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Supplier", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._AddressId = value.Id;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Lectors(Lector entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Lectors(Lector entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _SupplierId;
		
		private System.Nullable<int> _LectorId;
		
		private string _Discriminator;
		
		private EntitySet<AccountTransaction> _AccountTransactions;
		
		private EntitySet<Lector> _Lectors;
		
		private EntityRef<Supplier> _Supplier;
		
		private EntityRef<Lector> _Lector;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    partial void OnLectorIdChanging(System.Nullable<int> value);
    partial void OnLectorIdChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    #endregion
		
		public Account()
		{
			this._AccountTransactions = new EntitySet<AccountTransaction>(new Action<AccountTransaction>(this.attach_AccountTransactions), new Action<AccountTransaction>(this.detach_AccountTransactions));
			this._Lectors = new EntitySet<Lector>(new Action<Lector>(this.attach_Lectors), new Action<Lector>(this.detach_Lectors));
			this._Supplier = default(EntityRef<Supplier>);
			this._Lector = default(EntityRef<Lector>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int")]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectorId", DbType="Int")]
		public System.Nullable<int> LectorId
		{
			get
			{
				return this._LectorId;
			}
			set
			{
				if ((this._LectorId != value))
				{
					if (this._Lector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLectorIdChanging(value);
					this.SendPropertyChanging();
					this._LectorId = value;
					this.SendPropertyChanged("LectorId");
					this.OnLectorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Discriminator
		{
			get
			{
				return this._Discriminator;
			}
			set
			{
				if ((this._Discriminator != value))
				{
					this.OnDiscriminatorChanging(value);
					this.SendPropertyChanging();
					this._Discriminator = value;
					this.SendPropertyChanged("Discriminator");
					this.OnDiscriminatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountTransaction", Storage="_AccountTransactions", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<AccountTransaction> AccountTransactions
		{
			get
			{
				return this._AccountTransactions;
			}
			set
			{
				this._AccountTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Lector", Storage="_Lectors", ThisKey="Id", OtherKey="CommissionAccountId")]
		public EntitySet<Lector> Lectors
		{
			get
			{
				return this._Lectors;
			}
			set
			{
				this._Lectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Account", Storage="_Supplier", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._SupplierId = value.Id;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lector_Account", Storage="_Lector", ThisKey="LectorId", OtherKey="Id", IsForeignKey=true)]
		public Lector Lector
		{
			get
			{
				return this._Lector.Entity;
			}
			set
			{
				Lector previousValue = this._Lector.Entity;
				if (((previousValue != value) 
							|| (this._Lector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lector.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Lector.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._LectorId = value.Id;
					}
					else
					{
						this._LectorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lector");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountTransactions(AccountTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountTransactions(AccountTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Lectors(Lector entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Lectors(Lector entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTransactions")]
	public partial class AccountTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _AccountId;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _PaidDate;
		
		private System.Nullable<int> _CourseId;
		
		private string _LectorInvoiceUrl;
		
		private string _Discriminator;
		
		private System.Nullable<int> _InvoiceId;
		
		private string _Description;
		
		private string _InvoiceUrl;
		
		private System.Nullable<decimal> _CustomAccountTransaction_Amount;
		
		private System.Nullable<System.DateTime> _CustomAccountTransaction_CreatedDate;
		
		private System.Nullable<System.DateTime> _CustomAccountTransaction_PaidDate;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnPaidDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaidDateChanged();
    partial void OnCourseIdChanging(System.Nullable<int> value);
    partial void OnCourseIdChanged();
    partial void OnLectorInvoiceUrlChanging(string value);
    partial void OnLectorInvoiceUrlChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnInvoiceUrlChanging(string value);
    partial void OnInvoiceUrlChanged();
    partial void OnCustomAccountTransaction_AmountChanging(System.Nullable<decimal> value);
    partial void OnCustomAccountTransaction_AmountChanged();
    partial void OnCustomAccountTransaction_CreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCustomAccountTransaction_CreatedDateChanged();
    partial void OnCustomAccountTransaction_PaidDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCustomAccountTransaction_PaidDateChanged();
    #endregion
		
		public AccountTransaction()
		{
			this._Account = default(EntityRef<Account>);
			this._Course = default(EntityRef<Course>);
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> PaidDate
		{
			get
			{
				return this._PaidDate;
			}
			set
			{
				if ((this._PaidDate != value))
				{
					this.OnPaidDateChanging(value);
					this.SendPropertyChanging();
					this._PaidDate = value;
					this.SendPropertyChanged("PaidDate");
					this.OnPaidDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int")]
		public System.Nullable<int> CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectorInvoiceUrl", DbType="NVarChar(200)")]
		public string LectorInvoiceUrl
		{
			get
			{
				return this._LectorInvoiceUrl;
			}
			set
			{
				if ((this._LectorInvoiceUrl != value))
				{
					this.OnLectorInvoiceUrlChanging(value);
					this.SendPropertyChanging();
					this._LectorInvoiceUrl = value;
					this.SendPropertyChanged("LectorInvoiceUrl");
					this.OnLectorInvoiceUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Discriminator
		{
			get
			{
				return this._Discriminator;
			}
			set
			{
				if ((this._Discriminator != value))
				{
					this.OnDiscriminatorChanging(value);
					this.SendPropertyChanging();
					this._Discriminator = value;
					this.SendPropertyChanged("Discriminator");
					this.OnDiscriminatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceUrl", DbType="NVarChar(200)")]
		public string InvoiceUrl
		{
			get
			{
				return this._InvoiceUrl;
			}
			set
			{
				if ((this._InvoiceUrl != value))
				{
					this.OnInvoiceUrlChanging(value);
					this.SendPropertyChanging();
					this._InvoiceUrl = value;
					this.SendPropertyChanged("InvoiceUrl");
					this.OnInvoiceUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomAccountTransaction_Amount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CustomAccountTransaction_Amount
		{
			get
			{
				return this._CustomAccountTransaction_Amount;
			}
			set
			{
				if ((this._CustomAccountTransaction_Amount != value))
				{
					this.OnCustomAccountTransaction_AmountChanging(value);
					this.SendPropertyChanging();
					this._CustomAccountTransaction_Amount = value;
					this.SendPropertyChanged("CustomAccountTransaction_Amount");
					this.OnCustomAccountTransaction_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomAccountTransaction_CreatedDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> CustomAccountTransaction_CreatedDate
		{
			get
			{
				return this._CustomAccountTransaction_CreatedDate;
			}
			set
			{
				if ((this._CustomAccountTransaction_CreatedDate != value))
				{
					this.OnCustomAccountTransaction_CreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CustomAccountTransaction_CreatedDate = value;
					this.SendPropertyChanged("CustomAccountTransaction_CreatedDate");
					this.OnCustomAccountTransaction_CreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomAccountTransaction_PaidDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> CustomAccountTransaction_PaidDate
		{
			get
			{
				return this._CustomAccountTransaction_PaidDate;
			}
			set
			{
				if ((this._CustomAccountTransaction_PaidDate != value))
				{
					this.OnCustomAccountTransaction_PaidDateChanging(value);
					this.SendPropertyChanging();
					this._CustomAccountTransaction_PaidDate = value;
					this.SendPropertyChanged("CustomAccountTransaction_PaidDate");
					this.OnCustomAccountTransaction_PaidDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountTransaction", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountTransactions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountTransactions.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_AccountTransaction", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.AccountTransactions.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.AccountTransactions.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_AccountTransaction", Storage="_Invoice", ThisKey="InvoiceId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.AccountTransactions.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.AccountTransactions.Add(this);
						this._InvoiceId = value.Id;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Street;
		
		private string _City;
		
		private string _ZIP;
		
		private string _IC;
		
		private string _DIC;
		
		private System.Nullable<int> _CountryId;
		
		private string _CompanyRegistration;
		
		private string _BankAccount;
		
		private string _Iban;
		
		private string _Swift;
		
		private EntitySet<Supplier> _Suppliers;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnZIPChanging(string value);
    partial void OnZIPChanged();
    partial void OnICChanging(string value);
    partial void OnICChanged();
    partial void OnDICChanging(string value);
    partial void OnDICChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnCompanyRegistrationChanging(string value);
    partial void OnCompanyRegistrationChanged();
    partial void OnBankAccountChanging(string value);
    partial void OnBankAccountChanged();
    partial void OnIbanChanging(string value);
    partial void OnIbanChanged();
    partial void OnSwiftChanging(string value);
    partial void OnSwiftChanged();
    #endregion
		
		public Address()
		{
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(200)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIP", DbType="NVarChar(20)")]
		public string ZIP
		{
			get
			{
				return this._ZIP;
			}
			set
			{
				if ((this._ZIP != value))
				{
					this.OnZIPChanging(value);
					this.SendPropertyChanging();
					this._ZIP = value;
					this.SendPropertyChanged("ZIP");
					this.OnZIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IC", DbType="NVarChar(20)")]
		public string IC
		{
			get
			{
				return this._IC;
			}
			set
			{
				if ((this._IC != value))
				{
					this.OnICChanging(value);
					this.SendPropertyChanging();
					this._IC = value;
					this.SendPropertyChanged("IC");
					this.OnICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIC", DbType="NVarChar(20)")]
		public string DIC
		{
			get
			{
				return this._DIC;
			}
			set
			{
				if ((this._DIC != value))
				{
					this.OnDICChanging(value);
					this.SendPropertyChanging();
					this._DIC = value;
					this.SendPropertyChanged("DIC");
					this.OnDICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyRegistration", DbType="NVarChar(200)")]
		public string CompanyRegistration
		{
			get
			{
				return this._CompanyRegistration;
			}
			set
			{
				if ((this._CompanyRegistration != value))
				{
					this.OnCompanyRegistrationChanging(value);
					this.SendPropertyChanging();
					this._CompanyRegistration = value;
					this.SendPropertyChanged("CompanyRegistration");
					this.OnCompanyRegistrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccount", DbType="NVarChar(50)")]
		public string BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				if ((this._BankAccount != value))
				{
					this.OnBankAccountChanging(value);
					this.SendPropertyChanging();
					this._BankAccount = value;
					this.SendPropertyChanged("BankAccount");
					this.OnBankAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Iban", DbType="NVarChar(50)")]
		public string Iban
		{
			get
			{
				return this._Iban;
			}
			set
			{
				if ((this._Iban != value))
				{
					this.OnIbanChanging(value);
					this.SendPropertyChanging();
					this._Iban = value;
					this.SendPropertyChanged("Iban");
					this.OnIbanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Swift", DbType="NVarChar(50)")]
		public string Swift
		{
			get
			{
				return this._Swift;
			}
			set
			{
				if ((this._Swift != value))
				{
					this.OnSwiftChanging(value);
					this.SendPropertyChanging();
					this._Swift = value;
					this.SendPropertyChanged("Swift");
					this.OnSwiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Supplier", Storage="_Suppliers", ThisKey="Id", OtherKey="AddressId")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Customer", Storage="_Customers", ThisKey="Id", OtherKey="AddressId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Invoice", Storage="_Invoices", ThisKey="Id", OtherKey="AddressId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Order", Storage="_Orders", ThisKey="Id", OtherKey="BillingAddressId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachments")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Url;
		
		private int _CourseId;
		
		private string _FileName;
		
		private string _Description;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Attachment()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(200)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(200)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Attachment", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttendeeRegistrations")]
	public partial class AttendeeRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private int _OrderId;
		
		private System.DateTime _CreatedDate;
		
		private bool _IsDeleted;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private bool _IsUnknown;
		
		private System.Nullable<int> _Day;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsUnknownChanging(bool value);
    partial void OnIsUnknownChanged();
    partial void OnDayChanging(System.Nullable<int> value);
    partial void OnDayChanged();
    #endregion
		
		public AttendeeRegistration()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(200)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(200)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUnknown", DbType="Bit NOT NULL")]
		public bool IsUnknown
		{
			get
			{
				return this._IsUnknown;
			}
			set
			{
				if ((this._IsUnknown != value))
				{
					this.OnIsUnknownChanging(value);
					this.SendPropertyChanging();
					this._IsUnknown = value;
					this.SendPropertyChanged("IsUnknown");
					this.OnIsUnknownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="Int")]
		public System.Nullable<int> Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_AttendeeRegistration", Storage="_Order", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.AttendeeRegistrations.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.AttendeeRegistrations.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _UrlName;
		
		private string _Description;
		
		private System.Nullable<int> _PromotionOrder;
		
		private int _MainCategoryId;
		
		private string _ImageUrl;
		
		private EntitySet<CategoryCourseTemplate> _CategoryCourseTemplates;
		
		private EntityRef<MainCategory> _MainCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPromotionOrderChanging(System.Nullable<int> value);
    partial void OnPromotionOrderChanged();
    partial void OnMainCategoryIdChanging(int value);
    partial void OnMainCategoryIdChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    #endregion
		
		public Category()
		{
			this._CategoryCourseTemplates = new EntitySet<CategoryCourseTemplate>(new Action<CategoryCourseTemplate>(this.attach_CategoryCourseTemplates), new Action<CategoryCourseTemplate>(this.detach_CategoryCourseTemplates));
			this._MainCategory = default(EntityRef<MainCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlName", DbType="NVarChar(200)")]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PromotionOrder", DbType="Int")]
		public System.Nullable<int> PromotionOrder
		{
			get
			{
				return this._PromotionOrder;
			}
			set
			{
				if ((this._PromotionOrder != value))
				{
					this.OnPromotionOrderChanging(value);
					this.SendPropertyChanging();
					this._PromotionOrder = value;
					this.SendPropertyChanged("PromotionOrder");
					this.OnPromotionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainCategoryId", DbType="Int NOT NULL")]
		public int MainCategoryId
		{
			get
			{
				return this._MainCategoryId;
			}
			set
			{
				if ((this._MainCategoryId != value))
				{
					if (this._MainCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._MainCategoryId = value;
					this.SendPropertyChanged("MainCategoryId");
					this.OnMainCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrl", DbType="NVarChar(MAX)")]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryCourseTemplate", Storage="_CategoryCourseTemplates", ThisKey="Id", OtherKey="CategoriesId")]
		public EntitySet<CategoryCourseTemplate> CategoryCourseTemplates
		{
			get
			{
				return this._CategoryCourseTemplates;
			}
			set
			{
				this._CategoryCourseTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MainCategory_Category", Storage="_MainCategory", ThisKey="MainCategoryId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MainCategory MainCategory
		{
			get
			{
				return this._MainCategory.Entity;
			}
			set
			{
				MainCategory previousValue = this._MainCategory.Entity;
				if (((previousValue != value) 
							|| (this._MainCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MainCategory.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._MainCategory.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._MainCategoryId = value.Id;
					}
					else
					{
						this._MainCategoryId = default(int);
					}
					this.SendPropertyChanged("MainCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryCourseTemplates(CategoryCourseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CategoryCourseTemplates(CategoryCourseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryCourseTemplate")]
	public partial class CategoryCourseTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoriesId;
		
		private int _CourseTemplatesId;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<CourseTemplate> _CourseTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoriesIdChanging(int value);
    partial void OnCategoriesIdChanged();
    partial void OnCourseTemplatesIdChanging(int value);
    partial void OnCourseTemplatesIdChanged();
    #endregion
		
		public CategoryCourseTemplate()
		{
			this._Category = default(EntityRef<Category>);
			this._CourseTemplate = default(EntityRef<CourseTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoriesId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoriesId
		{
			get
			{
				return this._CategoriesId;
			}
			set
			{
				if ((this._CategoriesId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoriesIdChanging(value);
					this.SendPropertyChanging();
					this._CategoriesId = value;
					this.SendPropertyChanged("CategoriesId");
					this.OnCategoriesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTemplatesId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseTemplatesId
		{
			get
			{
				return this._CourseTemplatesId;
			}
			set
			{
				if ((this._CourseTemplatesId != value))
				{
					if (this._CourseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTemplatesIdChanging(value);
					this.SendPropertyChanging();
					this._CourseTemplatesId = value;
					this.SendPropertyChanged("CourseTemplatesId");
					this.OnCourseTemplatesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryCourseTemplate", Storage="_Category", ThisKey="CategoriesId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CategoryCourseTemplates.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CategoryCourseTemplates.Add(this);
						this._CategoriesId = value.Id;
					}
					else
					{
						this._CategoriesId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_CategoryCourseTemplate", Storage="_CourseTemplate", ThisKey="CourseTemplatesId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CourseTemplate CourseTemplate
		{
			get
			{
				return this._CourseTemplate.Entity;
			}
			set
			{
				CourseTemplate previousValue = this._CourseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._CourseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTemplate.Entity = null;
						previousValue.CategoryCourseTemplates.Remove(this);
					}
					this._CourseTemplate.Entity = value;
					if ((value != null))
					{
						value.CategoryCourseTemplates.Add(this);
						this._CourseTemplatesId = value.Id;
					}
					else
					{
						this._CourseTemplatesId = default(int);
					}
					this.SendPropertyChanged("CourseTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Addresses", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseDates")]
	public partial class CourseDate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseId;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    #endregion
		
		public CourseDate()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseDate", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseDates.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseDates.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseLector")]
	public partial class CourseLector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CoursesId;
		
		private int _LectorsId;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Lector> _Lector;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoursesIdChanging(int value);
    partial void OnCoursesIdChanged();
    partial void OnLectorsIdChanging(int value);
    partial void OnLectorsIdChanged();
    #endregion
		
		public CourseLector()
		{
			this._Course = default(EntityRef<Course>);
			this._Lector = default(EntityRef<Lector>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoursesId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CoursesId
		{
			get
			{
				return this._CoursesId;
			}
			set
			{
				if ((this._CoursesId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoursesIdChanging(value);
					this.SendPropertyChanging();
					this._CoursesId = value;
					this.SendPropertyChanged("CoursesId");
					this.OnCoursesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectorsId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LectorsId
		{
			get
			{
				return this._LectorsId;
			}
			set
			{
				if ((this._LectorsId != value))
				{
					if (this._Lector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLectorsIdChanging(value);
					this.SendPropertyChanging();
					this._LectorsId = value;
					this.SendPropertyChanged("LectorsId");
					this.OnLectorsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseLector", Storage="_Course", ThisKey="CoursesId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseLectors.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseLectors.Add(this);
						this._CoursesId = value.Id;
					}
					else
					{
						this._CoursesId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lector_CourseLector", Storage="_Lector", ThisKey="LectorsId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lector Lector
		{
			get
			{
				return this._Lector.Entity;
			}
			set
			{
				Lector previousValue = this._Lector.Entity;
				if (((previousValue != value) 
							|| (this._Lector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lector.Entity = null;
						previousValue.CourseLectors.Remove(this);
					}
					this._Lector.Entity = value;
					if ((value != null))
					{
						value.CourseLectors.Add(this);
						this._LectorsId = value.Id;
					}
					else
					{
						this._LectorsId = default(int);
					}
					this.SendPropertyChanged("Lector");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseReminders")]
	public partial class CourseReminder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseId;
		
		private int _AppUserId;
		
		private System.DateTime _ReminderDate;
		
		private bool _WasReminded;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnAppUserIdChanging(int value);
    partial void OnAppUserIdChanged();
    partial void OnReminderDateChanging(System.DateTime value);
    partial void OnReminderDateChanged();
    partial void OnWasRemindedChanging(bool value);
    partial void OnWasRemindedChanged();
    #endregion
		
		public CourseReminder()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppUserId", DbType="Int NOT NULL")]
		public int AppUserId
		{
			get
			{
				return this._AppUserId;
			}
			set
			{
				if ((this._AppUserId != value))
				{
					this.OnAppUserIdChanging(value);
					this.SendPropertyChanging();
					this._AppUserId = value;
					this.SendPropertyChanged("AppUserId");
					this.OnAppUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReminderDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ReminderDate
		{
			get
			{
				return this._ReminderDate;
			}
			set
			{
				if ((this._ReminderDate != value))
				{
					this.OnReminderDateChanging(value);
					this.SendPropertyChanging();
					this._ReminderDate = value;
					this.SendPropertyChanged("ReminderDate");
					this.OnReminderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasReminded", DbType="Bit NOT NULL")]
		public bool WasReminded
		{
			get
			{
				return this._WasReminded;
			}
			set
			{
				if ((this._WasReminded != value))
				{
					this.OnWasRemindedChanging(value);
					this.SendPropertyChanging();
					this._WasReminded = value;
					this.SendPropertyChanged("WasReminded");
					this.OnWasRemindedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseReminder", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseReminders.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseReminders.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _BeginDate;
		
		private bool _IsEveningCourse;
		
		private int _NumberOfDays;
		
		private int _CourseTemplateId;
		
		private string _LocationNotes;
		
		private string _ContentNotes;
		
		private int _Type;
		
		private System.Nullable<int> _LocationId;
		
		private decimal _Price;
		
		private bool _IsApproved;
		
		private bool _IsDeleted;
		
		private int _SupplierId;
		
		private string _CourseSubtitle;
		
		private bool _IsRegistrationClosed;
		
		private bool _AllowOnlinePayments;
		
		private bool _AllowCashPayments;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<int> _CustomerId;
		
		private decimal _Margin;
		
		private decimal _PricePerDay;
		
		private int _MinimumNumberOfAttendees;
		
		private EntitySet<AccountTransaction> _AccountTransactions;
		
		private EntitySet<Attachment> _Attachments;
		
		private EntitySet<CourseDate> _CourseDates;
		
		private EntitySet<CourseLector> _CourseLectors;
		
		private EntitySet<CourseReminder> _CourseReminders;
		
		private EntitySet<DiscountCoupon> _DiscountCoupons;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Recording> _Recordings;
		
		private EntityRef<Supplier> _Supplier;
		
		private EntityRef<CourseTemplate> _CourseTemplate;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnIsEveningCourseChanging(bool value);
    partial void OnIsEveningCourseChanged();
    partial void OnNumberOfDaysChanging(int value);
    partial void OnNumberOfDaysChanged();
    partial void OnCourseTemplateIdChanging(int value);
    partial void OnCourseTemplateIdChanged();
    partial void OnLocationNotesChanging(string value);
    partial void OnLocationNotesChanged();
    partial void OnContentNotesChanging(string value);
    partial void OnContentNotesChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLocationIdChanging(System.Nullable<int> value);
    partial void OnLocationIdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnCourseSubtitleChanging(string value);
    partial void OnCourseSubtitleChanged();
    partial void OnIsRegistrationClosedChanging(bool value);
    partial void OnIsRegistrationClosedChanged();
    partial void OnAllowOnlinePaymentsChanging(bool value);
    partial void OnAllowOnlinePaymentsChanged();
    partial void OnAllowCashPaymentsChanging(bool value);
    partial void OnAllowCashPaymentsChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnMarginChanging(decimal value);
    partial void OnMarginChanged();
    partial void OnPricePerDayChanging(decimal value);
    partial void OnPricePerDayChanged();
    partial void OnMinimumNumberOfAttendeesChanging(int value);
    partial void OnMinimumNumberOfAttendeesChanged();
    #endregion
		
		public Course()
		{
			this._AccountTransactions = new EntitySet<AccountTransaction>(new Action<AccountTransaction>(this.attach_AccountTransactions), new Action<AccountTransaction>(this.detach_AccountTransactions));
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			this._CourseDates = new EntitySet<CourseDate>(new Action<CourseDate>(this.attach_CourseDates), new Action<CourseDate>(this.detach_CourseDates));
			this._CourseLectors = new EntitySet<CourseLector>(new Action<CourseLector>(this.attach_CourseLectors), new Action<CourseLector>(this.detach_CourseLectors));
			this._CourseReminders = new EntitySet<CourseReminder>(new Action<CourseReminder>(this.attach_CourseReminders), new Action<CourseReminder>(this.detach_CourseReminders));
			this._DiscountCoupons = new EntitySet<DiscountCoupon>(new Action<DiscountCoupon>(this.attach_DiscountCoupons), new Action<DiscountCoupon>(this.detach_DiscountCoupons));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Recordings = new EntitySet<Recording>(new Action<Recording>(this.attach_Recordings), new Action<Recording>(this.detach_Recordings));
			this._Supplier = default(EntityRef<Supplier>);
			this._CourseTemplate = default(EntityRef<CourseTemplate>);
			this._Customer = default(EntityRef<Customer>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEveningCourse", DbType="Bit NOT NULL")]
		public bool IsEveningCourse
		{
			get
			{
				return this._IsEveningCourse;
			}
			set
			{
				if ((this._IsEveningCourse != value))
				{
					this.OnIsEveningCourseChanging(value);
					this.SendPropertyChanging();
					this._IsEveningCourse = value;
					this.SendPropertyChanged("IsEveningCourse");
					this.OnIsEveningCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfDays", DbType="Int NOT NULL")]
		public int NumberOfDays
		{
			get
			{
				return this._NumberOfDays;
			}
			set
			{
				if ((this._NumberOfDays != value))
				{
					this.OnNumberOfDaysChanging(value);
					this.SendPropertyChanging();
					this._NumberOfDays = value;
					this.SendPropertyChanged("NumberOfDays");
					this.OnNumberOfDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTemplateId", DbType="Int NOT NULL")]
		public int CourseTemplateId
		{
			get
			{
				return this._CourseTemplateId;
			}
			set
			{
				if ((this._CourseTemplateId != value))
				{
					if (this._CourseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._CourseTemplateId = value;
					this.SendPropertyChanged("CourseTemplateId");
					this.OnCourseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationNotes", DbType="NVarChar(MAX)")]
		public string LocationNotes
		{
			get
			{
				return this._LocationNotes;
			}
			set
			{
				if ((this._LocationNotes != value))
				{
					this.OnLocationNotesChanging(value);
					this.SendPropertyChanging();
					this._LocationNotes = value;
					this.SendPropertyChanged("LocationNotes");
					this.OnLocationNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentNotes", DbType="NVarChar(MAX)")]
		public string ContentNotes
		{
			get
			{
				return this._ContentNotes;
			}
			set
			{
				if ((this._ContentNotes != value))
				{
					this.OnContentNotesChanging(value);
					this.SendPropertyChanging();
					this._ContentNotes = value;
					this.SendPropertyChanged("ContentNotes");
					this.OnContentNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int")]
		public System.Nullable<int> LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int NOT NULL")]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseSubtitle", DbType="NVarChar(200)")]
		public string CourseSubtitle
		{
			get
			{
				return this._CourseSubtitle;
			}
			set
			{
				if ((this._CourseSubtitle != value))
				{
					this.OnCourseSubtitleChanging(value);
					this.SendPropertyChanging();
					this._CourseSubtitle = value;
					this.SendPropertyChanged("CourseSubtitle");
					this.OnCourseSubtitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRegistrationClosed", DbType="Bit NOT NULL")]
		public bool IsRegistrationClosed
		{
			get
			{
				return this._IsRegistrationClosed;
			}
			set
			{
				if ((this._IsRegistrationClosed != value))
				{
					this.OnIsRegistrationClosedChanging(value);
					this.SendPropertyChanging();
					this._IsRegistrationClosed = value;
					this.SendPropertyChanged("IsRegistrationClosed");
					this.OnIsRegistrationClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowOnlinePayments", DbType="Bit NOT NULL")]
		public bool AllowOnlinePayments
		{
			get
			{
				return this._AllowOnlinePayments;
			}
			set
			{
				if ((this._AllowOnlinePayments != value))
				{
					this.OnAllowOnlinePaymentsChanging(value);
					this.SendPropertyChanging();
					this._AllowOnlinePayments = value;
					this.SendPropertyChanged("AllowOnlinePayments");
					this.OnAllowOnlinePaymentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowCashPayments", DbType="Bit NOT NULL")]
		public bool AllowCashPayments
		{
			get
			{
				return this._AllowCashPayments;
			}
			set
			{
				if ((this._AllowCashPayments != value))
				{
					this.OnAllowCashPaymentsChanging(value);
					this.SendPropertyChanging();
					this._AllowCashPayments = value;
					this.SendPropertyChanged("AllowCashPayments");
					this.OnAllowCashPaymentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Margin", DbType="Decimal(18,2) NOT NULL")]
		public decimal Margin
		{
			get
			{
				return this._Margin;
			}
			set
			{
				if ((this._Margin != value))
				{
					this.OnMarginChanging(value);
					this.SendPropertyChanging();
					this._Margin = value;
					this.SendPropertyChanged("Margin");
					this.OnMarginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerDay", DbType="Decimal(18,2) NOT NULL")]
		public decimal PricePerDay
		{
			get
			{
				return this._PricePerDay;
			}
			set
			{
				if ((this._PricePerDay != value))
				{
					this.OnPricePerDayChanging(value);
					this.SendPropertyChanging();
					this._PricePerDay = value;
					this.SendPropertyChanged("PricePerDay");
					this.OnPricePerDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumNumberOfAttendees", DbType="Int NOT NULL")]
		public int MinimumNumberOfAttendees
		{
			get
			{
				return this._MinimumNumberOfAttendees;
			}
			set
			{
				if ((this._MinimumNumberOfAttendees != value))
				{
					this.OnMinimumNumberOfAttendeesChanging(value);
					this.SendPropertyChanging();
					this._MinimumNumberOfAttendees = value;
					this.SendPropertyChanged("MinimumNumberOfAttendees");
					this.OnMinimumNumberOfAttendeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_AccountTransaction", Storage="_AccountTransactions", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<AccountTransaction> AccountTransactions
		{
			get
			{
				return this._AccountTransactions;
			}
			set
			{
				this._AccountTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Attachment", Storage="_Attachments", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseDate", Storage="_CourseDates", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<CourseDate> CourseDates
		{
			get
			{
				return this._CourseDates;
			}
			set
			{
				this._CourseDates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseLector", Storage="_CourseLectors", ThisKey="Id", OtherKey="CoursesId")]
		public EntitySet<CourseLector> CourseLectors
		{
			get
			{
				return this._CourseLectors;
			}
			set
			{
				this._CourseLectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseReminder", Storage="_CourseReminders", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<CourseReminder> CourseReminders
		{
			get
			{
				return this._CourseReminders;
			}
			set
			{
				this._CourseReminders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_DiscountCoupon", Storage="_DiscountCoupons", ThisKey="Id", OtherKey="RestrictToCourseId")]
		public EntitySet<DiscountCoupon> DiscountCoupons
		{
			get
			{
				return this._DiscountCoupons;
			}
			set
			{
				this._DiscountCoupons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Order", Storage="_Orders", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Recording", Storage="_Recordings", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<Recording> Recordings
		{
			get
			{
				return this._Recordings;
			}
			set
			{
				this._Recordings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Course", Storage="_Supplier", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._SupplierId = value.Id;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_Course", Storage="_CourseTemplate", ThisKey="CourseTemplateId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CourseTemplate CourseTemplate
		{
			get
			{
				return this._CourseTemplate.Entity;
			}
			set
			{
				CourseTemplate previousValue = this._CourseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._CourseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTemplate.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._CourseTemplate.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._CourseTemplateId = value.Id;
					}
					else
					{
						this._CourseTemplateId = default(int);
					}
					this.SendPropertyChanged("CourseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Course", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Course", Storage="_Location", ThisKey="LocationId", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._LocationId = value.Id;
					}
					else
					{
						this._LocationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountTransactions(AccountTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_AccountTransactions(AccountTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CourseDates(CourseDate entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseDates(CourseDate entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CourseLectors(CourseLector entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseLectors(CourseLector entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CourseReminders(CourseReminder entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseReminders(CourseReminder entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_DiscountCoupons(DiscountCoupon entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_DiscountCoupons(DiscountCoupon entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Recordings(Recording entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Recordings(Recording entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseTemplateRelations")]
	public partial class CourseTemplateRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseTemplateId;
		
		private int _RelatedCourseTemplateId;
		
		private int _Type;
		
		private EntityRef<CourseTemplate> _CourseTemplate;
		
		private EntityRef<CourseTemplate> _CourseTemplate1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseTemplateIdChanging(int value);
    partial void OnCourseTemplateIdChanged();
    partial void OnRelatedCourseTemplateIdChanging(int value);
    partial void OnRelatedCourseTemplateIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public CourseTemplateRelation()
		{
			this._CourseTemplate = default(EntityRef<CourseTemplate>);
			this._CourseTemplate1 = default(EntityRef<CourseTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTemplateId", DbType="Int NOT NULL")]
		public int CourseTemplateId
		{
			get
			{
				return this._CourseTemplateId;
			}
			set
			{
				if ((this._CourseTemplateId != value))
				{
					if (this._CourseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._CourseTemplateId = value;
					this.SendPropertyChanged("CourseTemplateId");
					this.OnCourseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedCourseTemplateId", DbType="Int NOT NULL")]
		public int RelatedCourseTemplateId
		{
			get
			{
				return this._RelatedCourseTemplateId;
			}
			set
			{
				if ((this._RelatedCourseTemplateId != value))
				{
					if (this._CourseTemplate1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedCourseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._RelatedCourseTemplateId = value;
					this.SendPropertyChanged("RelatedCourseTemplateId");
					this.OnRelatedCourseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_CourseTemplateRelation", Storage="_CourseTemplate", ThisKey="CourseTemplateId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CourseTemplate CourseTemplate
		{
			get
			{
				return this._CourseTemplate.Entity;
			}
			set
			{
				CourseTemplate previousValue = this._CourseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._CourseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTemplate.Entity = null;
						previousValue.CourseTemplateRelations.Remove(this);
					}
					this._CourseTemplate.Entity = value;
					if ((value != null))
					{
						value.CourseTemplateRelations.Add(this);
						this._CourseTemplateId = value.Id;
					}
					else
					{
						this._CourseTemplateId = default(int);
					}
					this.SendPropertyChanged("CourseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_CourseTemplateRelation1", Storage="_CourseTemplate1", ThisKey="RelatedCourseTemplateId", OtherKey="Id", IsForeignKey=true)]
		public CourseTemplate CourseTemplate1
		{
			get
			{
				return this._CourseTemplate1.Entity;
			}
			set
			{
				CourseTemplate previousValue = this._CourseTemplate1.Entity;
				if (((previousValue != value) 
							|| (this._CourseTemplate1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTemplate1.Entity = null;
						previousValue.CourseTemplateRelations1.Remove(this);
					}
					this._CourseTemplate1.Entity = value;
					if ((value != null))
					{
						value.CourseTemplateRelations1.Add(this);
						this._RelatedCourseTemplateId = value.Id;
					}
					else
					{
						this._RelatedCourseTemplateId = default(int);
					}
					this.SendPropertyChanged("CourseTemplate1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseTemplates")]
	public partial class CourseTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _IsDeleted;
		
		private string _Name;
		
		private string _Description;
		
		private string _RequiredKnowledge;
		
		private int _TypicalNumberOfDays;
		
		private bool _IsPrivate;
		
		private string _Code;
		
		private string _UrlName;
		
		private string _Keywords;
		
		private System.Nullable<int> _PromotionOrder;
		
		private EntitySet<CategoryCourseTemplate> _CategoryCourseTemplates;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<CourseTemplateRelation> _CourseTemplateRelations;
		
		private EntitySet<CourseTemplateRelation> _CourseTemplateRelations1;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRequiredKnowledgeChanging(string value);
    partial void OnRequiredKnowledgeChanged();
    partial void OnTypicalNumberOfDaysChanging(int value);
    partial void OnTypicalNumberOfDaysChanged();
    partial void OnIsPrivateChanging(bool value);
    partial void OnIsPrivateChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnPromotionOrderChanging(System.Nullable<int> value);
    partial void OnPromotionOrderChanged();
    #endregion
		
		public CourseTemplate()
		{
			this._CategoryCourseTemplates = new EntitySet<CategoryCourseTemplate>(new Action<CategoryCourseTemplate>(this.attach_CategoryCourseTemplates), new Action<CategoryCourseTemplate>(this.detach_CategoryCourseTemplates));
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._CourseTemplateRelations = new EntitySet<CourseTemplateRelation>(new Action<CourseTemplateRelation>(this.attach_CourseTemplateRelations), new Action<CourseTemplateRelation>(this.detach_CourseTemplateRelations));
			this._CourseTemplateRelations1 = new EntitySet<CourseTemplateRelation>(new Action<CourseTemplateRelation>(this.attach_CourseTemplateRelations1), new Action<CourseTemplateRelation>(this.detach_CourseTemplateRelations1));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredKnowledge", DbType="NVarChar(200)")]
		public string RequiredKnowledge
		{
			get
			{
				return this._RequiredKnowledge;
			}
			set
			{
				if ((this._RequiredKnowledge != value))
				{
					this.OnRequiredKnowledgeChanging(value);
					this.SendPropertyChanging();
					this._RequiredKnowledge = value;
					this.SendPropertyChanged("RequiredKnowledge");
					this.OnRequiredKnowledgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypicalNumberOfDays", DbType="Int NOT NULL")]
		public int TypicalNumberOfDays
		{
			get
			{
				return this._TypicalNumberOfDays;
			}
			set
			{
				if ((this._TypicalNumberOfDays != value))
				{
					this.OnTypicalNumberOfDaysChanging(value);
					this.SendPropertyChanging();
					this._TypicalNumberOfDays = value;
					this.SendPropertyChanged("TypicalNumberOfDays");
					this.OnTypicalNumberOfDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrivate", DbType="Bit NOT NULL")]
		public bool IsPrivate
		{
			get
			{
				return this._IsPrivate;
			}
			set
			{
				if ((this._IsPrivate != value))
				{
					this.OnIsPrivateChanging(value);
					this.SendPropertyChanging();
					this._IsPrivate = value;
					this.SendPropertyChanged("IsPrivate");
					this.OnIsPrivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlName", DbType="NVarChar(200)")]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(500)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PromotionOrder", DbType="Int")]
		public System.Nullable<int> PromotionOrder
		{
			get
			{
				return this._PromotionOrder;
			}
			set
			{
				if ((this._PromotionOrder != value))
				{
					this.OnPromotionOrderChanging(value);
					this.SendPropertyChanging();
					this._PromotionOrder = value;
					this.SendPropertyChanged("PromotionOrder");
					this.OnPromotionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_CategoryCourseTemplate", Storage="_CategoryCourseTemplates", ThisKey="Id", OtherKey="CourseTemplatesId")]
		public EntitySet<CategoryCourseTemplate> CategoryCourseTemplates
		{
			get
			{
				return this._CategoryCourseTemplates;
			}
			set
			{
				this._CategoryCourseTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_Course", Storage="_Courses", ThisKey="Id", OtherKey="CourseTemplateId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_CourseTemplateRelation", Storage="_CourseTemplateRelations", ThisKey="Id", OtherKey="CourseTemplateId")]
		public EntitySet<CourseTemplateRelation> CourseTemplateRelations
		{
			get
			{
				return this._CourseTemplateRelations;
			}
			set
			{
				this._CourseTemplateRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_CourseTemplateRelation1", Storage="_CourseTemplateRelations1", ThisKey="Id", OtherKey="RelatedCourseTemplateId")]
		public EntitySet<CourseTemplateRelation> CourseTemplateRelations1
		{
			get
			{
				return this._CourseTemplateRelations1;
			}
			set
			{
				this._CourseTemplateRelations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_Order", Storage="_Orders", ThisKey="Id", OtherKey="CourseTemplateId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryCourseTemplates(CategoryCourseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate = this;
		}
		
		private void detach_CategoryCourseTemplates(CategoryCourseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate = null;
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate = null;
		}
		
		private void attach_CourseTemplateRelations(CourseTemplateRelation entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate = this;
		}
		
		private void detach_CourseTemplateRelations(CourseTemplateRelation entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate = null;
		}
		
		private void attach_CourseTemplateRelations1(CourseTemplateRelation entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate1 = this;
		}
		
		private void detach_CourseTemplateRelations1(CourseTemplateRelation entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate1 = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.CourseTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _AddressId;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    #endregion
		
		public Customer()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Course", Storage="_Courses", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Invoices", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Customer", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._AddressId = value.Id;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscountCoupons")]
	public partial class DiscountCoupon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Code;
		
		private decimal _Percent;
		
		private System.Nullable<int> _RestrictToCourseId;
		
		private bool _IsOneTime;
		
		private System.Nullable<System.DateTime> _ExpirationDate;
		
		private int _Id;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnPercentChanging(decimal value);
    partial void OnPercentChanged();
    partial void OnRestrictToCourseIdChanging(System.Nullable<int> value);
    partial void OnRestrictToCourseIdChanged();
    partial void OnIsOneTimeChanging(bool value);
    partial void OnIsOneTimeChanged();
    partial void OnExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationDateChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public DiscountCoupon()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(100)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Percent]", Storage="_Percent", DbType="Decimal(18,2) NOT NULL")]
		public decimal Percent
		{
			get
			{
				return this._Percent;
			}
			set
			{
				if ((this._Percent != value))
				{
					this.OnPercentChanging(value);
					this.SendPropertyChanging();
					this._Percent = value;
					this.SendPropertyChanged("Percent");
					this.OnPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RestrictToCourseId", DbType="Int")]
		public System.Nullable<int> RestrictToCourseId
		{
			get
			{
				return this._RestrictToCourseId;
			}
			set
			{
				if ((this._RestrictToCourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRestrictToCourseIdChanging(value);
					this.SendPropertyChanging();
					this._RestrictToCourseId = value;
					this.SendPropertyChanged("RestrictToCourseId");
					this.OnRestrictToCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOneTime", DbType="Bit NOT NULL")]
		public bool IsOneTime
		{
			get
			{
				return this._IsOneTime;
			}
			set
			{
				if ((this._IsOneTime != value))
				{
					this.OnIsOneTimeChanging(value);
					this.SendPropertyChanging();
					this._IsOneTime = value;
					this.SendPropertyChanged("IsOneTime");
					this.OnIsOneTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiscountCoupon_Order", Storage="_Orders", ThisKey="Id", OtherKey="DiscountCouponId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_DiscountCoupon", Storage="_Course", ThisKey="RestrictToCourseId", OtherKey="Id", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.DiscountCoupons.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.DiscountCoupons.Add(this);
						this._RestrictToCourseId = value.Id;
					}
					else
					{
						this._RestrictToCourseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.DiscountCoupon = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.DiscountCoupon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceLines")]
	public partial class InvoiceLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _InvoiceId;
		
		private string _Text;
		
		private decimal _UnitPrice;
		
		private decimal _VATRate;
		
		private decimal _Units;
		
		private string _UnitName;
		
		private decimal _TotalAmount;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInvoiceIdChanging(int value);
    partial void OnInvoiceIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnVATRateChanging(decimal value);
    partial void OnVATRateChanged();
    partial void OnUnitsChanging(decimal value);
    partial void OnUnitsChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    partial void OnTotalAmountChanging(decimal value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public InvoiceLine()
		{
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int NOT NULL")]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VATRate", DbType="Decimal(18,2) NOT NULL")]
		public decimal VATRate
		{
			get
			{
				return this._VATRate;
			}
			set
			{
				if ((this._VATRate != value))
				{
					this.OnVATRateChanging(value);
					this.SendPropertyChanging();
					this._VATRate = value;
					this.SendPropertyChanged("VATRate");
					this.OnVATRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="Decimal(18,2) NOT NULL")]
		public decimal Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitName", DbType="NVarChar(MAX)")]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceLine", Storage="_Invoice", ThisKey="InvoiceId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceLines.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceLines.Add(this);
						this._InvoiceId = value.Id;
					}
					else
					{
						this._InvoiceId = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoices")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Number;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _DueDate;
		
		private System.Nullable<System.DateTime> _PaidDate;
		
		private string _Notes;
		
		private bool _IsFinalInvoice;
		
		private string _FileUrl;
		
		private string _Currency;
		
		private decimal _TotalAmount;
		
		private int _SupplierId;
		
		private int _AddressId;
		
		private System.Nullable<int> _CustomerId;
		
		private bool _IsCorrectionInvoice;
		
		private string _CorrectedInvoiceNumber;
		
		private decimal _TotalAmountWithoutVAT;
		
		private System.Nullable<System.DateTime> _TaxDate;
		
		private EntitySet<AccountTransaction> _AccountTransactions;
		
		private EntitySet<InvoiceLine> _InvoiceLines;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Order> _Orders1;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnPaidDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaidDateChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnIsFinalInvoiceChanging(bool value);
    partial void OnIsFinalInvoiceChanged();
    partial void OnFileUrlChanging(string value);
    partial void OnFileUrlChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnTotalAmountChanging(decimal value);
    partial void OnTotalAmountChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnIsCorrectionInvoiceChanging(bool value);
    partial void OnIsCorrectionInvoiceChanged();
    partial void OnCorrectedInvoiceNumberChanging(string value);
    partial void OnCorrectedInvoiceNumberChanged();
    partial void OnTotalAmountWithoutVATChanging(decimal value);
    partial void OnTotalAmountWithoutVATChanged();
    partial void OnTaxDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTaxDateChanged();
    #endregion
		
		public Invoice()
		{
			this._AccountTransactions = new EntitySet<AccountTransaction>(new Action<AccountTransaction>(this.attach_AccountTransactions), new Action<AccountTransaction>(this.detach_AccountTransactions));
			this._InvoiceLines = new EntitySet<InvoiceLine>(new Action<InvoiceLine>(this.attach_InvoiceLines), new Action<InvoiceLine>(this.detach_InvoiceLines));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
			this._Address = default(EntityRef<Address>);
			this._Customer = default(EntityRef<Customer>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(20)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> PaidDate
		{
			get
			{
				return this._PaidDate;
			}
			set
			{
				if ((this._PaidDate != value))
				{
					this.OnPaidDateChanging(value);
					this.SendPropertyChanging();
					this._PaidDate = value;
					this.SendPropertyChanged("PaidDate");
					this.OnPaidDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFinalInvoice", DbType="Bit NOT NULL")]
		public bool IsFinalInvoice
		{
			get
			{
				return this._IsFinalInvoice;
			}
			set
			{
				if ((this._IsFinalInvoice != value))
				{
					this.OnIsFinalInvoiceChanging(value);
					this.SendPropertyChanging();
					this._IsFinalInvoice = value;
					this.SendPropertyChanged("IsFinalInvoice");
					this.OnIsFinalInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileUrl", DbType="NVarChar(200)")]
		public string FileUrl
		{
			get
			{
				return this._FileUrl;
			}
			set
			{
				if ((this._FileUrl != value))
				{
					this.OnFileUrlChanging(value);
					this.SendPropertyChanging();
					this._FileUrl = value;
					this.SendPropertyChanged("FileUrl");
					this.OnFileUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(MAX)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int NOT NULL")]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrectionInvoice", DbType="Bit NOT NULL")]
		public bool IsCorrectionInvoice
		{
			get
			{
				return this._IsCorrectionInvoice;
			}
			set
			{
				if ((this._IsCorrectionInvoice != value))
				{
					this.OnIsCorrectionInvoiceChanging(value);
					this.SendPropertyChanging();
					this._IsCorrectionInvoice = value;
					this.SendPropertyChanged("IsCorrectionInvoice");
					this.OnIsCorrectionInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedInvoiceNumber", DbType="NVarChar(20)")]
		public string CorrectedInvoiceNumber
		{
			get
			{
				return this._CorrectedInvoiceNumber;
			}
			set
			{
				if ((this._CorrectedInvoiceNumber != value))
				{
					this.OnCorrectedInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._CorrectedInvoiceNumber = value;
					this.SendPropertyChanged("CorrectedInvoiceNumber");
					this.OnCorrectedInvoiceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmountWithoutVAT", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalAmountWithoutVAT
		{
			get
			{
				return this._TotalAmountWithoutVAT;
			}
			set
			{
				if ((this._TotalAmountWithoutVAT != value))
				{
					this.OnTotalAmountWithoutVATChanging(value);
					this.SendPropertyChanging();
					this._TotalAmountWithoutVAT = value;
					this.SendPropertyChanged("TotalAmountWithoutVAT");
					this.OnTotalAmountWithoutVATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> TaxDate
		{
			get
			{
				return this._TaxDate;
			}
			set
			{
				if ((this._TaxDate != value))
				{
					this.OnTaxDateChanging(value);
					this.SendPropertyChanging();
					this._TaxDate = value;
					this.SendPropertyChanged("TaxDate");
					this.OnTaxDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_AccountTransaction", Storage="_AccountTransactions", ThisKey="Id", OtherKey="InvoiceId")]
		public EntitySet<AccountTransaction> AccountTransactions
		{
			get
			{
				return this._AccountTransactions;
			}
			set
			{
				this._AccountTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceLine", Storage="_InvoiceLines", ThisKey="Id", OtherKey="InvoiceId")]
		public EntitySet<InvoiceLine> InvoiceLines
		{
			get
			{
				return this._InvoiceLines;
			}
			set
			{
				this._InvoiceLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Order", Storage="_Orders", ThisKey="Id", OtherKey="FinalInvoiceId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Order1", Storage="_Orders1", ThisKey="Id", OtherKey="ProformaInvoiceId")]
		public EntitySet<Order> Orders1
		{
			get
			{
				return this._Orders1;
			}
			set
			{
				this._Orders1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Invoice", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._AddressId = value.Id;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Invoice", Storage="_Supplier", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._SupplierId = value.Id;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountTransactions(AccountTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_AccountTransactions(AccountTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_InvoiceLines(InvoiceLine entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceLines(InvoiceLine entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
		
		private void attach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Invoice1 = this;
		}
		
		private void detach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Invoice1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LectorPrivateCourseRequest")]
	public partial class LectorPrivateCourseRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LectorsId;
		
		private int _PrivateCourseRequestsId;
		
		private EntityRef<Lector> _Lector;
		
		private EntityRef<PrivateCourseRequest> _PrivateCourseRequest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLectorsIdChanging(int value);
    partial void OnLectorsIdChanged();
    partial void OnPrivateCourseRequestsIdChanging(int value);
    partial void OnPrivateCourseRequestsIdChanged();
    #endregion
		
		public LectorPrivateCourseRequest()
		{
			this._Lector = default(EntityRef<Lector>);
			this._PrivateCourseRequest = default(EntityRef<PrivateCourseRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectorsId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LectorsId
		{
			get
			{
				return this._LectorsId;
			}
			set
			{
				if ((this._LectorsId != value))
				{
					if (this._Lector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLectorsIdChanging(value);
					this.SendPropertyChanging();
					this._LectorsId = value;
					this.SendPropertyChanged("LectorsId");
					this.OnLectorsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateCourseRequestsId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PrivateCourseRequestsId
		{
			get
			{
				return this._PrivateCourseRequestsId;
			}
			set
			{
				if ((this._PrivateCourseRequestsId != value))
				{
					if (this._PrivateCourseRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrivateCourseRequestsIdChanging(value);
					this.SendPropertyChanging();
					this._PrivateCourseRequestsId = value;
					this.SendPropertyChanged("PrivateCourseRequestsId");
					this.OnPrivateCourseRequestsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lector_LectorPrivateCourseRequest", Storage="_Lector", ThisKey="LectorsId", OtherKey="Id", IsForeignKey=true)]
		public Lector Lector
		{
			get
			{
				return this._Lector.Entity;
			}
			set
			{
				Lector previousValue = this._Lector.Entity;
				if (((previousValue != value) 
							|| (this._Lector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lector.Entity = null;
						previousValue.LectorPrivateCourseRequests.Remove(this);
					}
					this._Lector.Entity = value;
					if ((value != null))
					{
						value.LectorPrivateCourseRequests.Add(this);
						this._LectorsId = value.Id;
					}
					else
					{
						this._LectorsId = default(int);
					}
					this.SendPropertyChanged("Lector");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrivateCourseRequest_LectorPrivateCourseRequest", Storage="_PrivateCourseRequest", ThisKey="PrivateCourseRequestsId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PrivateCourseRequest PrivateCourseRequest
		{
			get
			{
				return this._PrivateCourseRequest.Entity;
			}
			set
			{
				PrivateCourseRequest previousValue = this._PrivateCourseRequest.Entity;
				if (((previousValue != value) 
							|| (this._PrivateCourseRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrivateCourseRequest.Entity = null;
						previousValue.LectorPrivateCourseRequests.Remove(this);
					}
					this._PrivateCourseRequest.Entity = value;
					if ((value != null))
					{
						value.LectorPrivateCourseRequests.Add(this);
						this._PrivateCourseRequestsId = value.Id;
					}
					else
					{
						this._PrivateCourseRequestsId = default(int);
					}
					this.SendPropertyChanged("PrivateCourseRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lectors")]
	public partial class Lector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Bio;
		
		private string _Blog;
		
		private string _LinkedIn;
		
		private string _Twitter;
		
		private int _UserId;
		
		private string _UrlName;
		
		private string _Website;
		
		private int _Order;
		
		private string _AvatarUrl;
		
		private bool _IsDeleted;
		
		private decimal _CommissionPrice;
		
		private decimal _CommissionPercent;
		
		private System.Nullable<int> _CommissionAccountId;
		
		private int _DefaultSupplierId;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<CourseLector> _CourseLectors;
		
		private EntitySet<LectorPrivateCourseRequest> _LectorPrivateCourseRequests;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBioChanging(string value);
    partial void OnBioChanged();
    partial void OnBlogChanging(string value);
    partial void OnBlogChanged();
    partial void OnLinkedInChanging(string value);
    partial void OnLinkedInChanged();
    partial void OnTwitterChanging(string value);
    partial void OnTwitterChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnAvatarUrlChanging(string value);
    partial void OnAvatarUrlChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCommissionPriceChanging(decimal value);
    partial void OnCommissionPriceChanged();
    partial void OnCommissionPercentChanging(decimal value);
    partial void OnCommissionPercentChanged();
    partial void OnCommissionAccountIdChanging(System.Nullable<int> value);
    partial void OnCommissionAccountIdChanged();
    partial void OnDefaultSupplierIdChanging(int value);
    partial void OnDefaultSupplierIdChanged();
    #endregion
		
		public Lector()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._CourseLectors = new EntitySet<CourseLector>(new Action<CourseLector>(this.attach_CourseLectors), new Action<CourseLector>(this.detach_CourseLectors));
			this._LectorPrivateCourseRequests = new EntitySet<LectorPrivateCourseRequest>(new Action<LectorPrivateCourseRequest>(this.attach_LectorPrivateCourseRequests), new Action<LectorPrivateCourseRequest>(this.detach_LectorPrivateCourseRequests));
			this._Account = default(EntityRef<Account>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bio", DbType="NVarChar(MAX)")]
		public string Bio
		{
			get
			{
				return this._Bio;
			}
			set
			{
				if ((this._Bio != value))
				{
					this.OnBioChanging(value);
					this.SendPropertyChanging();
					this._Bio = value;
					this.SendPropertyChanged("Bio");
					this.OnBioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blog", DbType="NVarChar(200)")]
		public string Blog
		{
			get
			{
				return this._Blog;
			}
			set
			{
				if ((this._Blog != value))
				{
					this.OnBlogChanging(value);
					this.SendPropertyChanging();
					this._Blog = value;
					this.SendPropertyChanged("Blog");
					this.OnBlogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedIn", DbType="NVarChar(200)")]
		public string LinkedIn
		{
			get
			{
				return this._LinkedIn;
			}
			set
			{
				if ((this._LinkedIn != value))
				{
					this.OnLinkedInChanging(value);
					this.SendPropertyChanging();
					this._LinkedIn = value;
					this.SendPropertyChanged("LinkedIn");
					this.OnLinkedInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Twitter", DbType="NVarChar(200)")]
		public string Twitter
		{
			get
			{
				return this._Twitter;
			}
			set
			{
				if ((this._Twitter != value))
				{
					this.OnTwitterChanging(value);
					this.SendPropertyChanging();
					this._Twitter = value;
					this.SendPropertyChanged("Twitter");
					this.OnTwitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlName", DbType="NVarChar(200)")]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(200)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarUrl", DbType="NVarChar(200)")]
		public string AvatarUrl
		{
			get
			{
				return this._AvatarUrl;
			}
			set
			{
				if ((this._AvatarUrl != value))
				{
					this.OnAvatarUrlChanging(value);
					this.SendPropertyChanging();
					this._AvatarUrl = value;
					this.SendPropertyChanged("AvatarUrl");
					this.OnAvatarUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommissionPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal CommissionPrice
		{
			get
			{
				return this._CommissionPrice;
			}
			set
			{
				if ((this._CommissionPrice != value))
				{
					this.OnCommissionPriceChanging(value);
					this.SendPropertyChanging();
					this._CommissionPrice = value;
					this.SendPropertyChanged("CommissionPrice");
					this.OnCommissionPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommissionPercent", DbType="Decimal(18,2) NOT NULL")]
		public decimal CommissionPercent
		{
			get
			{
				return this._CommissionPercent;
			}
			set
			{
				if ((this._CommissionPercent != value))
				{
					this.OnCommissionPercentChanging(value);
					this.SendPropertyChanging();
					this._CommissionPercent = value;
					this.SendPropertyChanged("CommissionPercent");
					this.OnCommissionPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommissionAccountId", DbType="Int")]
		public System.Nullable<int> CommissionAccountId
		{
			get
			{
				return this._CommissionAccountId;
			}
			set
			{
				if ((this._CommissionAccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommissionAccountIdChanging(value);
					this.SendPropertyChanging();
					this._CommissionAccountId = value;
					this.SendPropertyChanged("CommissionAccountId");
					this.OnCommissionAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultSupplierId", DbType="Int NOT NULL")]
		public int DefaultSupplierId
		{
			get
			{
				return this._DefaultSupplierId;
			}
			set
			{
				if ((this._DefaultSupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._DefaultSupplierId = value;
					this.SendPropertyChanged("DefaultSupplierId");
					this.OnDefaultSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lector_Account", Storage="_Accounts", ThisKey="Id", OtherKey="LectorId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lector_CourseLector", Storage="_CourseLectors", ThisKey="Id", OtherKey="LectorsId")]
		public EntitySet<CourseLector> CourseLectors
		{
			get
			{
				return this._CourseLectors;
			}
			set
			{
				this._CourseLectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lector_LectorPrivateCourseRequest", Storage="_LectorPrivateCourseRequests", ThisKey="Id", OtherKey="LectorsId")]
		public EntitySet<LectorPrivateCourseRequest> LectorPrivateCourseRequests
		{
			get
			{
				return this._LectorPrivateCourseRequests;
			}
			set
			{
				this._LectorPrivateCourseRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Lector", Storage="_Account", ThisKey="CommissionAccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Lectors.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Lectors.Add(this);
						this._CommissionAccountId = value.Id;
					}
					else
					{
						this._CommissionAccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Lector", Storage="_Supplier", ThisKey="DefaultSupplierId", OtherKey="Id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Lectors.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Lectors.Add(this);
						this._DefaultSupplierId = value.Id;
					}
					else
					{
						this._DefaultSupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Lector = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Lector = null;
		}
		
		private void attach_CourseLectors(CourseLector entity)
		{
			this.SendPropertyChanging();
			entity.Lector = this;
		}
		
		private void detach_CourseLectors(CourseLector entity)
		{
			this.SendPropertyChanging();
			entity.Lector = null;
		}
		
		private void attach_LectorPrivateCourseRequests(LectorPrivateCourseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Lector = this;
		}
		
		private void detach_LectorPrivateCourseRequests(LectorPrivateCourseRequest entity)
		{
			this.SendPropertyChanging();
			entity.Lector = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _City;
		
		private string _ZIP;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private string _HowToGetThere;
		
		private int _GeekcoreLocationId;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnZIPChanging(string value);
    partial void OnZIPChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnHowToGetThereChanging(string value);
    partial void OnHowToGetThereChanged();
    partial void OnGeekcoreLocationIdChanging(int value);
    partial void OnGeekcoreLocationIdChanged();
    #endregion
		
		public Location()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIP", DbType="NVarChar(200)")]
		public string ZIP
		{
			get
			{
				return this._ZIP;
			}
			set
			{
				if ((this._ZIP != value))
				{
					this.OnZIPChanging(value);
					this.SendPropertyChanging();
					this._ZIP = value;
					this.SendPropertyChanged("ZIP");
					this.OnZIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HowToGetThere", DbType="NVarChar(MAX)")]
		public string HowToGetThere
		{
			get
			{
				return this._HowToGetThere;
			}
			set
			{
				if ((this._HowToGetThere != value))
				{
					this.OnHowToGetThereChanging(value);
					this.SendPropertyChanging();
					this._HowToGetThere = value;
					this.SendPropertyChanged("HowToGetThere");
					this.OnHowToGetThereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeekcoreLocationId", DbType="Int NOT NULL")]
		public int GeekcoreLocationId
		{
			get
			{
				return this._GeekcoreLocationId;
			}
			set
			{
				if ((this._GeekcoreLocationId != value))
				{
					this.OnGeekcoreLocationIdChanging(value);
					this.SendPropertyChanging();
					this._GeekcoreLocationId = value;
					this.SendPropertyChanged("GeekcoreLocationId");
					this.OnGeekcoreLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Course", Storage="_Courses", ThisKey="Id", OtherKey="LocationId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MainCategories")]
	public partial class MainCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _UrlName;
		
		private EntitySet<Category> _Categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlNameChanging(string value);
    partial void OnUrlNameChanged();
    #endregion
		
		public MainCategory()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlName", DbType="NVarChar(200)")]
		public string UrlName
		{
			get
			{
				return this._UrlName;
			}
			set
			{
				if ((this._UrlName != value))
				{
					this.OnUrlNameChanging(value);
					this.SendPropertyChanging();
					this._UrlName = value;
					this.SendPropertyChanged("UrlName");
					this.OnUrlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MainCategory_Category", Storage="_Categories", ThisKey="Id", OtherKey="MainCategoryId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.MainCategory = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.MainCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderAvailableDates")]
	public partial class OrderAvailableDate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _OrderId;
		
		private System.DateTime _Date;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public OrderAvailableDate()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderAvailableDate", Storage="_Order", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderAvailableDates.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderAvailableDates.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<int> _UserId;
		
		private string _Notes;
		
		private System.Nullable<int> _BillingAddressId;
		
		private int _CourseId;
		
		private System.Nullable<int> _CourseTemplateId;
		
		private System.Nullable<int> _DiscountCouponId;
		
		private string _ContactEmail;
		
		private string _ContactPhone;
		
		private decimal _TotalPrice;
		
		private decimal _VATRate;
		
		private bool _HasVAT;
		
		private System.Nullable<System.DateTime> _PaidDate;
		
		private string _Currency;
		
		private decimal _UnitPrice;
		
		private decimal _DiscountPercent;
		
		private System.Nullable<int> _ProformaInvoiceId;
		
		private System.Nullable<int> _FinalInvoiceId;
		
		private System.Nullable<System.DateTime> _CanceledDate;
		
		private string _BraintreeTransactionId;
		
		private EntitySet<AttendeeRegistration> _AttendeeRegistrations;
		
		private EntitySet<OrderAvailableDate> _OrderAvailableDates;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<CourseTemplate> _CourseTemplate;
		
		private EntityRef<DiscountCoupon> _DiscountCoupon;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<Invoice> _Invoice1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnBillingAddressIdChanging(System.Nullable<int> value);
    partial void OnBillingAddressIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnCourseTemplateIdChanging(System.Nullable<int> value);
    partial void OnCourseTemplateIdChanged();
    partial void OnDiscountCouponIdChanging(System.Nullable<int> value);
    partial void OnDiscountCouponIdChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnTotalPriceChanging(decimal value);
    partial void OnTotalPriceChanged();
    partial void OnVATRateChanging(decimal value);
    partial void OnVATRateChanged();
    partial void OnHasVATChanging(bool value);
    partial void OnHasVATChanged();
    partial void OnPaidDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaidDateChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnDiscountPercentChanging(decimal value);
    partial void OnDiscountPercentChanged();
    partial void OnProformaInvoiceIdChanging(System.Nullable<int> value);
    partial void OnProformaInvoiceIdChanged();
    partial void OnFinalInvoiceIdChanging(System.Nullable<int> value);
    partial void OnFinalInvoiceIdChanged();
    partial void OnCanceledDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCanceledDateChanged();
    partial void OnBraintreeTransactionIdChanging(string value);
    partial void OnBraintreeTransactionIdChanged();
    #endregion
		
		public Order()
		{
			this._AttendeeRegistrations = new EntitySet<AttendeeRegistration>(new Action<AttendeeRegistration>(this.attach_AttendeeRegistrations), new Action<AttendeeRegistration>(this.detach_AttendeeRegistrations));
			this._OrderAvailableDates = new EntitySet<OrderAvailableDate>(new Action<OrderAvailableDate>(this.attach_OrderAvailableDates), new Action<OrderAvailableDate>(this.detach_OrderAvailableDates));
			this._Address = default(EntityRef<Address>);
			this._Course = default(EntityRef<Course>);
			this._CourseTemplate = default(EntityRef<CourseTemplate>);
			this._DiscountCoupon = default(EntityRef<DiscountCoupon>);
			this._Invoice = default(EntityRef<Invoice>);
			this._Invoice1 = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddressId", DbType="Int")]
		public System.Nullable<int> BillingAddressId
		{
			get
			{
				return this._BillingAddressId;
			}
			set
			{
				if ((this._BillingAddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingAddressIdChanging(value);
					this.SendPropertyChanging();
					this._BillingAddressId = value;
					this.SendPropertyChanged("BillingAddressId");
					this.OnBillingAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTemplateId", DbType="Int")]
		public System.Nullable<int> CourseTemplateId
		{
			get
			{
				return this._CourseTemplateId;
			}
			set
			{
				if ((this._CourseTemplateId != value))
				{
					if (this._CourseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._CourseTemplateId = value;
					this.SendPropertyChanged("CourseTemplateId");
					this.OnCourseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountCouponId", DbType="Int")]
		public System.Nullable<int> DiscountCouponId
		{
			get
			{
				return this._DiscountCouponId;
			}
			set
			{
				if ((this._DiscountCouponId != value))
				{
					if (this._DiscountCoupon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiscountCouponIdChanging(value);
					this.SendPropertyChanging();
					this._DiscountCouponId = value;
					this.SendPropertyChanged("DiscountCouponId");
					this.OnDiscountCouponIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="NVarChar(MAX)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="NVarChar(MAX)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VATRate", DbType="Decimal(18,2) NOT NULL")]
		public decimal VATRate
		{
			get
			{
				return this._VATRate;
			}
			set
			{
				if ((this._VATRate != value))
				{
					this.OnVATRateChanging(value);
					this.SendPropertyChanging();
					this._VATRate = value;
					this.SendPropertyChanged("VATRate");
					this.OnVATRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasVAT", DbType="Bit NOT NULL")]
		public bool HasVAT
		{
			get
			{
				return this._HasVAT;
			}
			set
			{
				if ((this._HasVAT != value))
				{
					this.OnHasVATChanging(value);
					this.SendPropertyChanging();
					this._HasVAT = value;
					this.SendPropertyChanged("HasVAT");
					this.OnHasVATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> PaidDate
		{
			get
			{
				return this._PaidDate;
			}
			set
			{
				if ((this._PaidDate != value))
				{
					this.OnPaidDateChanging(value);
					this.SendPropertyChanging();
					this._PaidDate = value;
					this.SendPropertyChanged("PaidDate");
					this.OnPaidDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(20)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountPercent", DbType="Decimal(18,2) NOT NULL")]
		public decimal DiscountPercent
		{
			get
			{
				return this._DiscountPercent;
			}
			set
			{
				if ((this._DiscountPercent != value))
				{
					this.OnDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercent = value;
					this.SendPropertyChanged("DiscountPercent");
					this.OnDiscountPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProformaInvoiceId", DbType="Int")]
		public System.Nullable<int> ProformaInvoiceId
		{
			get
			{
				return this._ProformaInvoiceId;
			}
			set
			{
				if ((this._ProformaInvoiceId != value))
				{
					if (this._Invoice1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProformaInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._ProformaInvoiceId = value;
					this.SendPropertyChanged("ProformaInvoiceId");
					this.OnProformaInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalInvoiceId", DbType="Int")]
		public System.Nullable<int> FinalInvoiceId
		{
			get
			{
				return this._FinalInvoiceId;
			}
			set
			{
				if ((this._FinalInvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinalInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._FinalInvoiceId = value;
					this.SendPropertyChanged("FinalInvoiceId");
					this.OnFinalInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanceledDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> CanceledDate
		{
			get
			{
				return this._CanceledDate;
			}
			set
			{
				if ((this._CanceledDate != value))
				{
					this.OnCanceledDateChanging(value);
					this.SendPropertyChanging();
					this._CanceledDate = value;
					this.SendPropertyChanged("CanceledDate");
					this.OnCanceledDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BraintreeTransactionId", DbType="NVarChar(200)")]
		public string BraintreeTransactionId
		{
			get
			{
				return this._BraintreeTransactionId;
			}
			set
			{
				if ((this._BraintreeTransactionId != value))
				{
					this.OnBraintreeTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._BraintreeTransactionId = value;
					this.SendPropertyChanged("BraintreeTransactionId");
					this.OnBraintreeTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_AttendeeRegistration", Storage="_AttendeeRegistrations", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<AttendeeRegistration> AttendeeRegistrations
		{
			get
			{
				return this._AttendeeRegistrations;
			}
			set
			{
				this._AttendeeRegistrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderAvailableDate", Storage="_OrderAvailableDates", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<OrderAvailableDate> OrderAvailableDates
		{
			get
			{
				return this._OrderAvailableDates;
			}
			set
			{
				this._OrderAvailableDates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Order", Storage="_Address", ThisKey="BillingAddressId", OtherKey="Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._BillingAddressId = value.Id;
					}
					else
					{
						this._BillingAddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Order", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseTemplate_Order", Storage="_CourseTemplate", ThisKey="CourseTemplateId", OtherKey="Id", IsForeignKey=true)]
		public CourseTemplate CourseTemplate
		{
			get
			{
				return this._CourseTemplate.Entity;
			}
			set
			{
				CourseTemplate previousValue = this._CourseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._CourseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseTemplate.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._CourseTemplate.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CourseTemplateId = value.Id;
					}
					else
					{
						this._CourseTemplateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiscountCoupon_Order", Storage="_DiscountCoupon", ThisKey="DiscountCouponId", OtherKey="Id", IsForeignKey=true)]
		public DiscountCoupon DiscountCoupon
		{
			get
			{
				return this._DiscountCoupon.Entity;
			}
			set
			{
				DiscountCoupon previousValue = this._DiscountCoupon.Entity;
				if (((previousValue != value) 
							|| (this._DiscountCoupon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiscountCoupon.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._DiscountCoupon.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._DiscountCouponId = value.Id;
					}
					else
					{
						this._DiscountCouponId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DiscountCoupon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Order", Storage="_Invoice", ThisKey="FinalInvoiceId", OtherKey="Id", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._FinalInvoiceId = value.Id;
					}
					else
					{
						this._FinalInvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Order1", Storage="_Invoice1", ThisKey="ProformaInvoiceId", OtherKey="Id", IsForeignKey=true)]
		public Invoice Invoice1
		{
			get
			{
				return this._Invoice1.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice1.Entity;
				if (((previousValue != value) 
							|| (this._Invoice1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice1.Entity = null;
						previousValue.Orders1.Remove(this);
					}
					this._Invoice1.Entity = value;
					if ((value != null))
					{
						value.Orders1.Add(this);
						this._ProformaInvoiceId = value.Id;
					}
					else
					{
						this._ProformaInvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AttendeeRegistrations(AttendeeRegistration entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_AttendeeRegistrations(AttendeeRegistration entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderAvailableDates(OrderAvailableDate entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderAvailableDates(OrderAvailableDate entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrivateCourseRequests")]
	public partial class PrivateCourseRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Topic;
		
		private string _CompanyName;
		
		private string _City;
		
		private int _NumberOfAttendees;
		
		private string _Dates;
		
		private string _Notes;
		
		private int _AppUserId;
		
		private System.DateTime _CreatedDate;
		
		private int _CourseLength;
		
		private bool _GrantFinancing;
		
		private EntitySet<LectorPrivateCourseRequest> _LectorPrivateCourseRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTopicChanging(string value);
    partial void OnTopicChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnNumberOfAttendeesChanging(int value);
    partial void OnNumberOfAttendeesChanged();
    partial void OnDatesChanging(string value);
    partial void OnDatesChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnAppUserIdChanging(int value);
    partial void OnAppUserIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCourseLengthChanging(int value);
    partial void OnCourseLengthChanged();
    partial void OnGrantFinancingChanging(bool value);
    partial void OnGrantFinancingChanged();
    #endregion
		
		public PrivateCourseRequest()
		{
			this._LectorPrivateCourseRequests = new EntitySet<LectorPrivateCourseRequest>(new Action<LectorPrivateCourseRequest>(this.attach_LectorPrivateCourseRequests), new Action<LectorPrivateCourseRequest>(this.detach_LectorPrivateCourseRequests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Topic", DbType="NVarChar(MAX)")]
		public string Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					this.OnTopicChanging(value);
					this.SendPropertyChanging();
					this._Topic = value;
					this.SendPropertyChanged("Topic");
					this.OnTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(100)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfAttendees", DbType="Int NOT NULL")]
		public int NumberOfAttendees
		{
			get
			{
				return this._NumberOfAttendees;
			}
			set
			{
				if ((this._NumberOfAttendees != value))
				{
					this.OnNumberOfAttendeesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfAttendees = value;
					this.SendPropertyChanged("NumberOfAttendees");
					this.OnNumberOfAttendeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dates", DbType="NVarChar(MAX)")]
		public string Dates
		{
			get
			{
				return this._Dates;
			}
			set
			{
				if ((this._Dates != value))
				{
					this.OnDatesChanging(value);
					this.SendPropertyChanging();
					this._Dates = value;
					this.SendPropertyChanged("Dates");
					this.OnDatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppUserId", DbType="Int NOT NULL")]
		public int AppUserId
		{
			get
			{
				return this._AppUserId;
			}
			set
			{
				if ((this._AppUserId != value))
				{
					this.OnAppUserIdChanging(value);
					this.SendPropertyChanging();
					this._AppUserId = value;
					this.SendPropertyChanged("AppUserId");
					this.OnAppUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseLength", DbType="Int NOT NULL")]
		public int CourseLength
		{
			get
			{
				return this._CourseLength;
			}
			set
			{
				if ((this._CourseLength != value))
				{
					this.OnCourseLengthChanging(value);
					this.SendPropertyChanging();
					this._CourseLength = value;
					this.SendPropertyChanged("CourseLength");
					this.OnCourseLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantFinancing", DbType="Bit NOT NULL")]
		public bool GrantFinancing
		{
			get
			{
				return this._GrantFinancing;
			}
			set
			{
				if ((this._GrantFinancing != value))
				{
					this.OnGrantFinancingChanging(value);
					this.SendPropertyChanging();
					this._GrantFinancing = value;
					this.SendPropertyChanged("GrantFinancing");
					this.OnGrantFinancingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrivateCourseRequest_LectorPrivateCourseRequest", Storage="_LectorPrivateCourseRequests", ThisKey="Id", OtherKey="PrivateCourseRequestsId")]
		public EntitySet<LectorPrivateCourseRequest> LectorPrivateCourseRequests
		{
			get
			{
				return this._LectorPrivateCourseRequests;
			}
			set
			{
				this._LectorPrivateCourseRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LectorPrivateCourseRequests(LectorPrivateCourseRequest entity)
		{
			this.SendPropertyChanging();
			entity.PrivateCourseRequest = this;
		}
		
		private void detach_LectorPrivateCourseRequests(LectorPrivateCourseRequest entity)
		{
			this.SendPropertyChanging();
			entity.PrivateCourseRequest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recordings")]
	public partial class Recording : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AzureAssetId;
		
		private string _PublicLinkUrl;
		
		private string _Description;
		
		private int _CourseId;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAzureAssetIdChanging(string value);
    partial void OnAzureAssetIdChanged();
    partial void OnPublicLinkUrlChanging(string value);
    partial void OnPublicLinkUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    #endregion
		
		public Recording()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AzureAssetId", DbType="NVarChar(MAX)")]
		public string AzureAssetId
		{
			get
			{
				return this._AzureAssetId;
			}
			set
			{
				if ((this._AzureAssetId != value))
				{
					this.OnAzureAssetIdChanging(value);
					this.SendPropertyChanging();
					this._AzureAssetId = value;
					this.SendPropertyChanged("AzureAssetId");
					this.OnAzureAssetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicLinkUrl", DbType="NVarChar(MAX)")]
		public string PublicLinkUrl
		{
			get
			{
				return this._PublicLinkUrl;
			}
			set
			{
				if ((this._PublicLinkUrl != value))
				{
					this.OnPublicLinkUrlChanging(value);
					this.SendPropertyChanging();
					this._PublicLinkUrl = value;
					this.SendPropertyChanged("PublicLinkUrl");
					this.OnPublicLinkUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Recording", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Recordings.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Recordings.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
