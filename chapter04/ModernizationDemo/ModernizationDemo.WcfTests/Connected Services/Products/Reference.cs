//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModernizationDemo.WcfTests.Products {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Products.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        ModernizationDemo.BusinessLogic.Models.ProductModel[] GetProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        System.Threading.Tasks.Task<ModernizationDemo.BusinessLogic.Models.ProductModel[]> GetProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProduct", ReplyAction="http://tempuri.org/IProductService/GetProductResponse")]
        ModernizationDemo.BusinessLogic.Models.ProductModel GetProduct(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProduct", ReplyAction="http://tempuri.org/IProductService/GetProductResponse")]
        System.Threading.Tasks.Task<ModernizationDemo.BusinessLogic.Models.ProductModel> GetProductAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        int AddProduct(ModernizationDemo.BusinessLogic.Models.ProductModel product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(ModernizationDemo.BusinessLogic.Models.ProductModel product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        void UpdateProduct(ModernizationDemo.BusinessLogic.Models.ProductModel product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        System.Threading.Tasks.Task UpdateProductAsync(ModernizationDemo.BusinessLogic.Models.ProductModel product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/RemoveProduct", ReplyAction="http://tempuri.org/IProductService/RemoveProductResponse")]
        void RemoveProduct(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/RemoveProduct", ReplyAction="http://tempuri.org/IProductService/RemoveProductResponse")]
        System.Threading.Tasks.Task RemoveProductAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : ModernizationDemo.WcfTests.Products.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<ModernizationDemo.WcfTests.Products.IProductService>, ModernizationDemo.WcfTests.Products.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ModernizationDemo.BusinessLogic.Models.ProductModel[] GetProducts() {
            return base.Channel.GetProducts();
        }
        
        public System.Threading.Tasks.Task<ModernizationDemo.BusinessLogic.Models.ProductModel[]> GetProductsAsync() {
            return base.Channel.GetProductsAsync();
        }
        
        public ModernizationDemo.BusinessLogic.Models.ProductModel GetProduct(int id) {
            return base.Channel.GetProduct(id);
        }
        
        public System.Threading.Tasks.Task<ModernizationDemo.BusinessLogic.Models.ProductModel> GetProductAsync(int id) {
            return base.Channel.GetProductAsync(id);
        }
        
        public int AddProduct(ModernizationDemo.BusinessLogic.Models.ProductModel product) {
            return base.Channel.AddProduct(product);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(ModernizationDemo.BusinessLogic.Models.ProductModel product) {
            return base.Channel.AddProductAsync(product);
        }
        
        public void UpdateProduct(ModernizationDemo.BusinessLogic.Models.ProductModel product) {
            base.Channel.UpdateProduct(product);
        }
        
        public System.Threading.Tasks.Task UpdateProductAsync(ModernizationDemo.BusinessLogic.Models.ProductModel product) {
            return base.Channel.UpdateProductAsync(product);
        }
        
        public void RemoveProduct(int id) {
            base.Channel.RemoveProduct(id);
        }
        
        public System.Threading.Tasks.Task RemoveProductAsync(int id) {
            return base.Channel.RemoveProductAsync(id);
        }
    }
}
